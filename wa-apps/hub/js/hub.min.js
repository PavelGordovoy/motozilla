if ($.ui) {
    $.wa = $.extend(true, $.wa, $.ui);
} else {
    $.wa = {};
}

$.wa = $.extend(true, $.wa, {
    data: {},
    content: false,
    get: function(key, defaultValue) {
        if (key == undefined) {
            return this.data;
        }
        return this.data[name] || defaultValue || null;
    },
    set: function(key, val) {
        if (key == undefined) {
            return this.data;
        }
        if (typeof(key) == 'object') {
            $.extend(this.data, key);
        } else {
            this.data[key] = value;
        }
        return this.data;
    },
    encodeHTML: function(html) {
        return html && (''+html).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    },
    decodeHTML: function(html) {
        return html.replace(/&amp;/g,'&').replace(/&lt;/g,'<').replace(/&gt;/g,'>');
    },
    setHash: function(hash){
        if (!(hash instanceof String) && hash.toString) {
            hash = hash.toString();
        }
        hash = hash.replace(/\/\//g, "/");
        hash = hash.replace(/^.*#/, '');
        if ($.browser && $.browser.safari) {
            // Work around bug in safari 5.0.5 and down that broke UTF8 hashes
            if (parent) {
                parent.window.location = parent.window.location.href.replace(/#.*/, '') + '#' + hash;
            } else {
                window.location = location.href.replace(/#.*/, '') + '#' + hash;
            }
        } else if (parent && (!$.browser || !$.browser.msie)) {
            parent.window.location.hash = hash;
        } else {
            location.hash = hash;
        }
        return true;
    },
    back: function (hash) {
        if (history.length > 2) {
            if (typeof(hash)=='number' && parseInt(hash) == hash) {
                history.go(-hash);
            } else {
                history.go(-1);
            }
        } else if ($.browser.msie && history.length > 0) {
            history.back();
        } else if (hash) {
            this.setHash(hash);
        }
        return false;
    },
    toggleHashParam: function(param){
        var hash = location.hash;
        if (hash.search(param) == -1){
            this.addToHash(param);
        } else {
            this.removeFromHash(param);
        }
    },
    addToHash: function(param){
        var hash = location.hash;
        if (hash.search(param) == -1){
            hash+='/'+param+'/';
        }
        this.setHash(hash);
    },
    removeFromHash: function(param){
        var hash = location.hash;
        if (hash.search(param) > -1){
            hash = hash.replace(param, "");
        }
        this.setHash(hash);
    },

    setTitle: function (title) {
        document.title = title;
    },
    array_search: function ( needle, haystack, strict ) {
        var strict = !!strict;

        for(var key in haystack){
            if( (strict && haystack[key] === needle) || (!strict && haystack[key] == needle) ){
                return key;
            }
        }
        return false;
    },

    /** Create dialog with given id (or use existing) and set it up according to properties.
        p = {
            content: // content for the dialog to show immediately. Default is a loading image.
            buttons: // html for button area. Defaut is a single 'cancel' link.

            url: ..., // if specified, content will be loaded from given url
            post: { // used with url; contains post parameters.
                var: value
            },
            onload: null // function to call when content is loaded (only when url is specified)
        }
      */
    dialogCreate: function(id, p) {
        p = $.extend({
                content: '<h1>Loading... <i class="icon16 loading"></i></h1>',
                buttons: null,
                url: null,
                post: null,
                small: false,
                onload: null,
                oncancel: null
            }, p);

        p.content = $(p.content);
        if (!p.buttons) {
            p.buttons = $('<input type="submit" class="button gray" value="'+$_('Cancel')+'">').click(function() {
                if (p.oncancel) {
                    p.oncancel.call(dialog[0]);
                }
                $.wa.dialogHide();
            });
        } else {
            p.buttons = $(p.buttons);
        }

        var dialog = $('#'+id);
        if (dialog.size() <= 0) {
            dialog = $(
                '<div class="dialog" id="'+id+'" style="display: none">'+
                    '<div class="dialog-background"></div>'+
                    '<div class="dialog-window">'+
                        '<div class="dialog-content">'+
                            '<div class="dialog-content-indent">'+
                                // content goes here
                            '</div>'+
                        '</div>'+
                        '<div class="dialog-buttons">'+
                            '<div class="dialog-buttons-gradient">'+
                                // buttons go here
                            '</div>'+
                        '</div>'+
                    '</div>'+
                '</div>'
            ).appendTo('body');
        }

        dialog.find('.dialog-buttons-gradient').empty().append(p.buttons);
        dialog.find('.dialog-content-indent').empty().append(p.content);
        dialog.show();

        if (p.small) {
            dialog.addClass('small');
        } else {
            dialog.removeClass('small');
        }

        if (p.url) {
            var f_callback = function (response) {
                dialog.find('.dialog-content-indent').html(response);
                $.wa.waCenterDialog(dialog);
                if (p.onload) {
                    p.onload.call(dialog[0]);
                }
            };
            if (p.post) {
                $.post(p.url, p.post, f_callback);
            } else {
                $.get(p.url, f_callback);
            }
        }

        this.waCenterDialog(dialog);

        // close on escape key
        var onEsc = function(e) {
            if (!dialog.is(':visible')) {
                return;
            }

            if (e && e.keyCode == 27) { // escape
                if (p.oncancel && typeof p.oncancel == 'function') {
                    p.oncancel.call(dialog[0]);
                }
                $.wa.dialogHide();
                return;
            }

            $(document).one('keyup', onEsc);
        };
        onEsc();
        $(document).one('hashchange', $.wa.dialogHide);
        return dialog;
    },

    /** Center the dialog initially or when its properties changed significantly
      * (e.g. when .small class applied or removed) */
    waCenterDialog: function(dialog) {
        dialog = $(dialog);

        // Have to adjust width and height via JS because of min-width and min-height properties.
        var wdw = dialog.find('.dialog-window');

        var dw = wdw.outerWidth(true);
        var dh = wdw.outerHeight(true);

        var ww = $(window).width();
        var wh = $(window).height();

        var w = (ww-dw)/2 / ww;
        var h = (wh-dh)/2 / wh;

        wdw.css({
            'left': Math.round(w*100)+'%',
            'top': Math.round(h*100)+'%'
        });
    },

    /** Hide all dialogs */
    dialogHide: function() {
        $('.dialog').hide();
        return false;
    },

    /** Close all .dropdown menus */
    dropdownsClose: function() {
        var dd = $('.dropdown:not(.disabled)');
        dd.addClass('disabled');
        setTimeout(function() {
            dd.removeClass('disabled');
        }, 600);
    },

    /** Enable automatic close of .dropdowns when user clicks on item inside one. */
    dropdownsCloseEnable: function() {
        $(document).on('click', '.dropdown:not(.disabled)', this.dropdownsClickHandler);
    },

    /** Disable automatic close of .dropdowns when user clicks on item inside one. */
    dropdownsCloseDisable: function() {
        $(document).off('click', '.dropdown:not(.disabled)', this.dropdownsClickHandler);
    },

    /** Click handler used in dropdownsCloseDisable() and dropdownsCloseEnable(). */
    dropdownsClickHandler: function(e) {
        var self = $(this);
        if (self.hasClass('no-click-close')) {
            return;
        }
        self.addClass('disabled');
        setTimeout(function() {
            self.removeClass('disabled');
        }, 600);
    },

     /** Set default value for an input field. If field becomes empty, it receives specified css class
        * and default value. On field focus, css class and value are removed. On blur, if field
        * is still empty, css class and value are restored. */
    defaultInputValue: function(input, defValue, cssClass) {
        if (!(input instanceof jQuery)) {
            input = $(input);
        }

        var onBlur = function() {
            var v = input.val();
            if (!v || v == defValue) {
                input.val(defValue);
                input.addClass(cssClass);
            }
        };
        onBlur();
        input.blur(onBlur);
        input.focus(function() {
            if (input.hasClass(cssClass)) {
                input.removeClass(cssClass);
                input.val('');
            }
        });
    },

    /**
     * Load a bunch of .js and .css files.
     * Return a jQuery Promise object that resolves when all scripts are loaded.
     *
     * Accepts either several filenames/promises as arguments,
     * or an array of filenames/promises,
     * or a hashmap { filename: boolean whether to load file }
     */
    loadFiles: function(files) {

        // Convert arguments to an array of filenames/promises
        if (!$.isArray(files)) {
            // Allows to pass hashmap { filename: boolean }
            if (typeof files === 'object' && !$.isArray(files)) {
                files = $.map(files, function(should_load, file) {
                    return should_load ? file : null;
                });
            }
            // allows to pass several filenames directly as arguments
            else {
                files = [].slice.apply(arguments);
            }
        }

        // Start loading and obtain list of promises
        var promises = files.map(function(file) {
            // make sure `file` is a non-empty string
            if (!file) {
                return null;
            } else if (typeof file != 'string') {
                if (typeof file === 'object' && typeof file.then === "function") {
                    return file; // allows to mix in custom promises
                } else {
                    return null;
                }
            }

            // CSS?
            if (file.match(/\.css(\?.*)?$/)) {
                $('<link>').appendTo('head').attr({
                    type: 'text/css',
                    rel: 'stylesheet',
                    href: file
                });

                // Trying to figure out when CSS loads is cumbersome.
                // So we don't bother for now.
                return null;
            }

            // Otherwise it's a JS script
            return $.ajax({
                cache: true,
                dataType: "script",
                url: file
            });

        }).filter(function(file) {
            return !!file;
        });

        // Combine promises into a single one
        return $.when.apply($, promises);
    },

    /**
     * Automatically set server-side timezone if "Auto" timezone setting
     * is saved in user profile.
     */
    determineTimezone: function(wa_url, callback) {

        var done = false;
        $.each(document.cookie.split(/;\s*/g), function(i, pair) {
            pair = pair.split('=', 2);
            if (pair[0] == 'tz') {
                done = true;
                if (callback) {
                    callback(pair[1]);
                }
                return false;
            }
        });

        if (done) {
            return;
        }

        var options = {};
        options[wa_url + "wa-content/js/jstz/jstz.min.js"] = !window.jstz;
        $.wa.loadFiles(options).then(function() {
            var timezone = window.jstz.determine().name();

            // Session cookie timezone
            document.cookie = "tz="+jstz.determine().name()+"; sameSite=LAX";

            // Expires in two weeks
            var expire = new Date();
            expire.setTime(expire.getTime() + 14*24*60*60*1000); // two weeks
            document.cookie = "oldtz="+timezone+"; expires="+expire.toUTCString()+"; sameSite=LAX";
            if (callback) {
                callback(timezone);
            }
        });
    },

    util: {
        formatFileSize: function(bytes) {
            var i = -1;
            do {
                bytes = bytes / 1024;
                i++;
            } while (bytes > 99);

            return Math.max(bytes, 0.01).toFixed(2) + ((i >=0)? (' ' + $_(['kB', 'MB', 'GB', 'TB', 'PB', 'EB'][i])):'');
        }
    }
});

if (!window.wa_skip_ajax_setup) {
    $.ajaxSetup({'cache': false});
    $(document).ajaxError(function(e, xhr, settings, exception) {
        // Ignore 502 error in background process
        if (xhr.status === 502 && exception == 'abort' || (settings.url && settings.url.indexOf('background_process') >= 0) || (settings.data && settings.data.indexOf('background_process') >= 0)) {
            console && console.log && console.log('Notice: XHR failed on load: '+ settings.url);
            return;
        }

        // Generic error page
        else if (xhr.status !== 200 && xhr.responseText) {
            if (!$.wa.errorHandler || $.wa.errorHandler(xhr)) {
                if (xhr.responseText.indexOf('Exception') != -1) {
                    $.wa.dialogCreate('ajax-error', {'content': "<div>" + xhr.responseText + '</div>'});
                    return;
                }

                document.open("text/html");
                document.write(xhr.responseText); // !!! throws an "Access denied" exception in IE9
                document.close();
                $(window).one('hashchange', function() {
                    window.location.reload();
                });
            }
        }
        // Session timeout, show login page
        else if (xhr.getResponseHeader('wa-session-expired')) {
            window.location.reload();
        }
        // Show an exception in development mode
        else if (typeof xhr.responseText !== 'undefined' && xhr.responseText.indexOf('Exception') != -1) {
            $.wa.dialogCreate('ajax-error', {'content': "<div>" + xhr.responseText + '</div>'});
        }
    });
}

if (!window.wa_skip_csrf_prefilter) {
    $.ajaxPrefilter(function (settings, originalSettings, xhr) {
        if (settings.crossDomain || (settings.type||'').toUpperCase() !== 'POST') {
            return;
        }

        var matches = document.cookie.match(new RegExp("(?:^|; )_csrf=([^;]*)"));
        if (!matches || !matches[1]) {
            return;
        }

        var csrf = decodeURIComponent(matches[1]);
        if (!settings.data && settings.data !== 0) settings.data = '';

        if (typeof(settings.data) == 'string') {
            if (settings.data.indexOf('_csrf=') == -1) {
                settings.data += (settings.data.length > 0 ? '&' : '') + '_csrf=' + csrf;
                xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
            }
        } else if (typeof(settings.data) == 'object') {
            if (window.FormData && settings.data instanceof window.FormData) {
                if ('function' == typeof settings.data.set) {
                    settings.data.set('_csrf', csrf);
                } else {
                    settings.data.append('_csrf', csrf);
                }
            } else {
                settings.data['_csrf'] = csrf;
            }
        }
    });
}

if (!Array.prototype.indexOf)
{
    Array.prototype.indexOf = function(elt /*, from*/)
    {
    var len = this.length;

    var from = Number(arguments[1]) || 0;
    from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
    if (from < 0){from += len;}

    for (; from < len; from++)
    {
        if (from in this &&
            this[from] === elt) {
            return from;
        }
    }
    return -1;
    };
}

/** Localization */

// strings set up by apps
$.wa.locale = $.wa.locale || {};

/** One parameter: translate a string.
  * Two parameters, int and string: translate and get correct word form to use with number. */
$_ = function(p1, p2) {
    if (!$ || !$.wa || !$.wa.locale) {
        console.log('JS localization failed: empty $.wa.locale');
        return ('string' === typeof p2) ? p2 : p1;
    }
    // Two parameters: number and string?
    if (p2) {
        if (!$.wa.locale[p2]) {
            if (console){
                console.log('JS localization failed: '+p2);
            }
            return p2;
        }
        if (typeof $.wa.locale[p2] == 'string') {
            return $.wa.locale[p2];
        }

        var d = Math.floor(p1 / 10) % 10,
            e = p1 % 10;
        if (d == 1 || e > 4 || e == 0) {
            return $.wa.locale[p2][2];
        }
        if (e == 1) {
            return $.wa.locale[p2][0];
        }
        return $.wa.locale[p2][1];
    }

    // Just one parameter: a string
    if ($.wa.locale[p1]) {
        return typeof $.wa.locale[p1] == 'string' ? $.wa.locale[p1] : $.wa.locale[p1][0];
    }

    if (console){
        console.log('JS localization failed: '+p1);
    }
    return p1;
};

// EOF;
jQuery.fn.waDialog = function (options) {
    options = jQuery.extend({
        loading_header: '',
        title: '',
        esc: true,
        buttons: null,
        url: null,
        url_reload: true,
        'class': null, // className is a synonym
        content: null,
        'width': 0,
        'height': 0,
        'min-width': 0,
        'min-height': 0,
        offsetTop: null,
        offsetLeft: null,
        disableButtonsOnSubmit: false,
        onLoad: null,
        onCancel: null,
        onSubmit: null
    }, options || {});

    var d = $(this);

    var id = d.attr('id');
    if (id && !d.hasClass('dialog')) {
        d.removeAttr('id');
        if ($("#" + id).length) {
            if (options.url) {
                d = $("#" + id);
                if (!options.url_reload) {
                    options.url = null;
                }
            } else {
                $("#" + id).remove();
            }
        }
    }

    var cl = (options['class'] || options['className']) ? (options['class'] || options['className']) : (d.attr('class') || '');

    if (!d.hasClass('dialog')) {
        var content = $(this);
        var $dialog_parent = d.parent();
        if (!$dialog_parent.length || !$dialog_parent.is(':visible')) {
            $dialog_parent = $('body');
        }
        d = $('<div ' + (id ? 'id = "' + id + '"' : '') + ' class="dialog ' + cl + '" style="display: none">'+
                    '<div class="dialog-background"></div>'+
                    '<div class="dialog-window"></div>'+
              '</div>').appendTo($dialog_parent);
        if (content.find('.dialog-content').length || content.find('.dialog-buttons').length) {
            $('.dialog-window', d).append(content.show());
            var dc = content.find('.dialog-content');
            if (dc.length) {
                var tmp = $('<div class="dialog-content-indent"></div>');
                dc.contents().appendTo(tmp);
                dc.append(tmp);
            }
            dc = content.find('.dialog-buttons');
            if (dc.length) {
                var tmp = $('<div class="dialog-buttons-gradient"></div>');
                dc.contents().appendTo(tmp);
                dc.append(tmp);
            }
        } else {
            $('.dialog-window', d).append(
                    (options.onSubmit ? '<form method="post" action="">' : '') +
                    '<div class="dialog-content">'+
                        '<div class="dialog-content-indent">'+
                            // content goes here
                        '</div>'+
                    '</div>'+
                    '<div class="dialog-buttons">'+
                        '<div class="dialog-buttons-gradient">'+
                            // buttons go here
                        '</div>'+
                    '</div>'+
                    (options.onSubmit ? '</form>' : '')
            );
            d.find('.dialog-content-indent').append(content.show());
        }
        if (options.buttons) {
            d.find('.dialog-buttons-gradient').empty().append(options.buttons);
        }
        if (options.url) {
            d.find('.dialog-content-indent').append('<h1>'+(options.loading_header || '')+'<i class="icon16 loading"></i></h1>');
        } else if (options.content) {
            d.find('.dialog-content-indent').append(options.content);
        }
        if (options.title) {
            d.find('.dialog-content-indent').prepend('<h1>' + options.title + '</h1>');
        }
    } else {
        if (options.content) {
            d.find('.dialog-content-indent').html(options.content);
            if (options.title) {
                d.find('.dialog-content-indent').prepend('<h1>' + options.title + '</h1>');
            }
        }
        if (options.buttons) {
            d.find('.dialog-buttons-gradient').empty().append(options.buttons);
        }
    }

    if (!d.find('.dialog-background').length) {
        d.prepend('<div class="dialog-background"> </div>');
    }

    d.unbind('close').bind('close', function () {
        if (options.onClose) {
            options.onClose.call($(this));
        }
        $(this).hide();
    });

    var css = ['width', 'height', 'min-width', 'min-height'];
    for (var k = 0; k < css.length; k++) {
        if (options[css[k]]) {
            if ((css[k] == 'height' && options[css[k]] < '300px') || (css[k] == 'width' && options[css[k]] < '400px')) {
                d.find('div.dialog-window').css('min-' + css[k], options[css[k]]);
            }
            d.find('div.dialog-window').css(css[k], options[css[k]]);
        }
    }

    if (options.disableButtonsOnSubmit) {
        d.find("input[type=submit]").removeAttr('disabled');
    }

    if (!d.parent().length) {
        d.appendTo('body');
    }


    d.show();

    if (options.url) {
        jQuery.get(options.url, function (response) {
            var el = $(response);
            if (el.find('.dialog-content').length || el.find('.dialog-buttons').length) {
                if (el.find('.dialog-content').length) {
                    d.find('.dialog-content-indent').empty().append(el.find('.dialog-content').contents());
                }
                if (el.find('.dialog-buttons').length) {
                    d.find('.dialog-buttons-gradient').empty().append(el.find('.dialog-buttons').contents());
                }
            } else {
                d.find('.dialog-content-indent').html(response);
            }
            d.trigger('wa-resize');
            if (options.onLoad) {
                options.onLoad.call(d.get(0));
            }
        });
    } else {
        if (options.onLoad) {
            options.onLoad.call(d.get(0));
        }
    }

    d.find('.dialog-buttons').delegate('.cancel', 'click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        if (options.onCancel) {
            options.onCancel.call(d.get(0));
        }
        d.trigger('close');
        return false;
    });


    if (options.onSubmit) {
        d.find('form').unbind('submit').submit(function (evt) {
            if (options.disableButtonsOnSubmit) {
                d.find("input[type=submit]").attr('disabled', 'disabled');
            }
            try {
                return options.onSubmit.apply(this, [d, evt]);
            } catch (e) {
                evt.preventDefault();
                throw e;
            }
        });
    }

    d.unbind('wa-resize').bind('wa-resize', function () {
        var el = jQuery(this).find('.dialog-window');
        var dw = el.width();
        var dh = el.height();

        jQuery("body").css('min-height', dh+'px');

        var ww = jQuery(window).width();
        var wh = jQuery(window).height()-60;

        //centralize dialog
        var w = (ww-dw)/2 / ww;
        var h = (wh-dh-60)/2 / wh; //60px is the height of .dialog-buttons div
        if (h < 0) h = 0;
        if (w < 0) w = 0;

        el.css({
            'left': options.offsetLeft || (Math.round(w*100)+'%'),
            'top': options.offsetTop || (Math.round(h*100)+'%')
        });
    }).trigger('wa-resize');

    if (options.esc) {
        d.unbind('esc').bind('esc', function () {
            d.trigger('close');
        });
    }
    return d;
};

jQuery(window).resize(function () {
    jQuery(".dialog:visible").trigger('wa-resize');
});

jQuery(document).keyup(function(e) {
    //all dialogs should be closed when Escape is pressed
    if (e.keyCode == 27) {
        jQuery(".dialog:visible").trigger('esc');
    }
});;
/**
 * jQuery History Plugin (balupton edition) - Simple History Handler/Remote for Hash, State, Bookmarking, and Forward Back Buttons
 * Copyright (C) 2008-2009 Benjamin Arthur Lupton
 * http://www.balupton/projects/jquery_history/
 *
 * This file is part of jQuery History Plugin (balupton edition).
 * 
 * jQuery History Plugin (balupton edition) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * jQuery History Plugin (balupton edition) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with jQuery History Plugin (balupton edition).  If not, see <http://www.gnu.org/licenses/>.
 *
 * @name jqsmarty: jquery.history.js
 * @package jQuery History Plugin (balupton edition)
 * @version 1.0.1-final
 * @date July 11, 2009
 * @category jquery plugin
 * @author Benjamin "balupton" Lupton {@link http://www.balupton.com}
 * @copyright (c) 2008-2009 Benjamin Arthur Lupton {@link http://www.balupton.com}
 * @license GNU Affero General Public License - {@link http://www.gnu.org/licenses/agpl.html}
 * @example Visit {@link http://jquery.com/plugins/project/jquery_history_bal} for more information.
 * 
 * 
 * I would like to take this space to thank the following projects, blogs, articles and people:
 * - jQuery {@link http://jquery.com/}
 * - jQuery UI History - Klaus Hartl {@link http://www.stilbuero.de/jquery/ui_history/}
 * - Really Simple History - Brian Dillard and Brad Neuberg {@link http://code.google.com/p/reallysimplehistory/}
 * - jQuery History Plugin - Taku Sano (Mikage Sawatari) {@link http://www.mikage.to/jquery/jquery_history.html}
 * - jQuery History Remote Plugin - Klaus Hartl {@link http://stilbuero.de/jquery/history/}
 * - Content With Style: Fixing the back button and enabling bookmarking for ajax apps - Mike Stenhouse {@link http://www.contentwithstyle.co.uk/Articles/38/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps}
 * - Bookmarks and Back Buttons {@link http://ajax.howtosetup.info/options-and-efficiencies/bookmarks-and-back-buttons/}
 * - Ajax: How to handle bookmarks and back buttons - Brad Neuberg {@link http://dev.aol.com/ajax-handling-bookmarks-and-back-button}
 *
 **
 ***
 * CHANGELOG
 **
 * v1.0.1-final, July 11, 2009
 * - Restructured a little bit
 * - Documented
 * - Cleaned go/request
 *
 * v1.0.0-final, June 19, 2009
 * - Been stable for over a year now, pushing live.
 * 
 * v0.1.0-dev, July 24, 2008
 * - Initial Release
 * 
 */

// Start of our jQuery Plugin
(function($)
{	// Create our Plugin function, with $ as the argument (we pass the jQuery object over later)
	// More info: http://docs.jquery.com/Plugins/Authoring#Custom_Alias
	
	// Debug
	
	if (typeof console === 'undefined') {
		console = typeof window.console !== 'undefined' ? window.console : {};
	}
	console.log			= console.log 			|| function(){};
	console.debug		= console.debug 		|| console.log;
	console.warn		= console.warn			|| console.log;
	console.error		= console.error			|| function(){var args = [];for (var i = 0; i < arguments.length; i++) { args.push(arguments[i]); } alert(args.join("\n")); };
	console.trace		= console.trace			|| console.log;
	console.group		= console.group			|| console.log;
	console.groupEnd	= console.groupEnd		|| console.log;
	console.profile		= console.profile		|| console.log;
	console.profileEnd	= console.profileEnd	|| console.log;
	
	
	// Declare our class
	$.History = {
		// Our Plugin definition
		
		// -----------------
		// Options
		
		options: {
			debug: false
		},
		
		// -----------------
		// Variables
		
		state:		'',
		$window:	null,
		$iframe:	null,
		handlers:	{
			generic:	[],
			specific:	{}
		},
		
		// --------------------------------------------------
		// Functions
		
		/**
		 * Format a hash into a proper state
		 * @param {String} hash
		 */
		format: function ( hash ) {
			// Format the hash
			hash = hash.replace(/^.+?#/g,'').replace(/^#?\/?|\/?$/g, '');
			// Return the hash
			return hash;
		},
		
		/**
		 * Get the current state of the application
		 */
        getState: function ( ) {
			var History = $.History;
			// Get the current state
			return History.state;
        },
		/**
		 * Set the current state of the application
		 * @param {String} hash
		 */
		setState: function ( state ) {
			var History = $.History;
			// Format the state
			state = History.format(state)
			// Apply the state
			History.state = state;
			// Return the state
			return History.state;
		},
		
		/**
		 * Get the current hash of the browser
		 */
		getHash: function ( ) {
			var History = $.History;
			// Get hash
			if (parent && !$.browser.msie) {
				var hash = parent.window.location.hash;
			} else {
				var hash = window.location.hash || location.hash;
			}
			// Format the hash
			hash = History.format(hash);
			// Return the hash
			return hash;
		},
		/**
		 * Set the current hash of the browser
		 * @param {String} hash
		 */
		setHash: function ( hash ) {
			var History = $.History;
			// Prepare hash
			hash = $.History.format(hash);
			hash = hash.replace(/^\/?|\/?(\?)|\/?$/g, '/$1');
			
			// Write hash
			if ( typeof window.location.hash !== 'undefined' ) {
				//window.location.hash = hash;
			} else {
				location.hash = hash;
			}
			
			// Update IE<8 History
			if ( $.browser.msie && parseInt($.browser.version, 10) < 8 )
			{	// We are IE<8
				$.History.$iframe.contentWindow.document.open();
				$.History.$iframe.contentWindow.document.close();
				//$.History.$iframe.contentWindow.document.location.hash = $.History.getState();						
			}
			
		},
		
		/**
		 * Go to the specific state - does not force a history entry like setHash
		 * @param {String} state
		 */
		go: function ( state ) {
			var History = $.History;
			
			// Format the state
			state = History.format(state);
			
			// Get the current hash
			var hash = History.getHash();
			
			// Are they different?
			if ( hash !== state ) {
				// Yes, create a history entry
				History.setHash(state);
				// Wait for hashchange
			} else {
				// No change, but update state and fire
				History.setState(state);
				History.trigger();
			}
			
			// Done
			return true;
		},
		
		/**
		 * Fired when the hash is changed, either automaticly or manually
		 * @param {Event} e
		 */
		hashchange: function ( e ) {

			var History = $.History;
			
			// Debug
			if ( History.options.debug ) {
				console.debug('History.hashchange', this, arguments);
			}
			
			// Get Hash
			var hash = History.getHash();
			var state = History.getState();
			
			// Prevent IE 8 from fireing this twice
			if ( (!History.$iframe && state === hash) || (History.$iframe && History.hash === History.$iframe.contentWindow.document.location.hash) ) {
				// For some reason this works
				return false;
			}
			
			// Check
			if ( state === hash ) {
				// Nothing to do
				return false;
			}
			
			// Update the state with the new hash
			History.setState(hash);
			
			// Fire the handler
			History.trigger();
			
			// All done
			return true;
		},
		
		/**
		 * Bind a handler to a hash
		 * @param {Object} state
		 * @param {Object} handler
		 */
		bind: function ( state, handler ) {
			var History = $.History;
			// 
			if ( handler ) {
				// We have a state specific handler
				// Prepare
				if ( typeof History.handlers.specific[state] === 'undefined' )
				{	// Make it an array
					History.handlers.specific[state] = [];
				}
				// Push new handler
				History.handlers.specific[state].push(handler);
			}
			else {
				// We have a generic handler
				handler = state;
				History.handlers.generic.push(handler);
			}
			
			// Done
			return true;
		},
		
		/**
		 * Trigger a handler for a state
		 * @param {String} state
		 */
		trigger: function ( state ) {
			var History = $.History;
			
			// Prepare
			if ( typeof state === 'undefined' ) {
				// Use current
				state = History.getState();
			}
			var i, n, handler, list;
			
			// Fire specific
			if ( typeof History.handlers.specific[state] !== 'undefined' ) {
				// We have specific handlers
				list = History.handlers.specific[state];
				for ( i = 0, n = list.length; i < n; ++i ) {
					// Fire the specific handler
					handler = list[i];
					handler(state);
				}
			}
			
			// Fire generics
			list = History.handlers.generic;
			for ( i = 0, n = list.length; i < n; ++i ) {
				// Fire the specific handler
				handler = list[i];
				handler(state);
			}
			
			// Done
			return true;
		},
		
		// --------------------------------------------------
		// Constructors
		
		/**
		 * Construct our application
		 */
		construct: function ( ) {
			var History = $.History;
			
			// Modify the document
			$(document).ready(function() {
				// Prepare the document
				History.domReady();
			});
			
			// Done
			return true;
		},
		
		/**
		 * Configure our application
		 * @param {Object} options
		 */
		configure: function ( options ) {
			var History = $.History;
			
			// Set options
			History.options = $.extend(History.options, options);
			
			// Done
			return true;
		},
		
		domReadied: false,
		domReady: function ( ) {
			var History = $.History;
			
			// Runonce
			if ( History.domRedied ) {
				return;
			}
			History.domRedied = true;
			
			// Define window
			History.$window = $(window);
			
			// Apply the hashchange function
			History.$window.bind('hashchange', this.hashchange);
			
			// Force hashchange support for all browsers
			setTimeout(History.hashchangeLoader, 200);
			
			// All done
			return true;
		},
		
		/**
		 * Enable hashchange for all browsers
		 */
		hashchangeLoader: function () {
			var History = $.History;
			
			// More is needed for non IE8 browsers
			if ( !($.browser.msie && parseInt($.browser.version) >= 8) ) {	
				// We are not IE8
			
				// State our checker function, it is used to constantly check the location to detect a change
				var checker;
				
				// Handle depending on the browser
				if ( $.browser.msie ) {
					// We are still IE
				
					// Append and $iframe to the document, as $iframes are required for back and forward
					// Create a hidden $iframe for hash change tracking
					History.$iframe = $('<iframe id="jquery-history-iframe" style="display: none;"></$iframe>').prependTo(document.body)[0];
					
					// Create initial history entry
					History.$iframe.contentWindow.document.open();
					History.$iframe.contentWindow.document.close();
					
					// Check for initial state
					var hash = History.getHash();
					if ( hash ) {
						// Apply it to the iframe
						History.$iframe.contentWindow.document.location.hash = hash;
					}
					
					// Define the checker function (for bookmarks)
					checker = function ( ) {
						var iframeHash = History.format(History.$iframe.contentWindow.document.location.hash);
						if ( History.getState() !== iframeHash ) {
							// Back Button Change
							History.setHash(History.$iframe.contentWindow.document.location.hash);
						}
						var hash = History.getHash();
						if ( History.getState() !== hash ) {
							// The has has changed
							History.go(hash);
						}
					};
				}
				else {
					// We are not IE
				
					// Define the checker function (for bookmarks, back, forward)
					checker = function ( ) {
						var hash = History.getHash();
						if ( History.getState() !== hash ) {
							// The has has changed
							History.go(hash);
						}
					};
				}
				
				// Apply the checker function
				if ( !($.browser.msie && parseInt($.browser.version) < 8) ) {
					setInterval(checker, 200);
				} else {
					setInterval(checker, 1500);
				}
			}
			else {
				// We are IE8
				var hash = History.getHash();
				if (hash) {
					History.$window.trigger('hashchange');
				}
			}
			
			// Done
			return true;
		}
	
	}; // We have finished extending/defining our Plugin

	// --------------------------------------------------
	// Finish up
	
	// Instantiate
	$.History.construct();

// Finished definition

})(jQuery); // We are done with our plugin, so lets call it with jQuery as the argument
;
/*
 * jQuery store - Plugin for persistent data storage using localStorage, userData (and window.name)
 * 
 * Authors: Rodney Rehm
 * Web: http://medialize.github.com/jQuery-store/
 * 
 * Licensed under the MIT License:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 */

/**********************************************************************************
 * INITIALIZE EXAMPLES:
 **********************************************************************************
 * 	// automatically detect best suited storage driver and use default serializers
 *	$.storage = new $.store();
 *	// optionally initialize with specific driver and or serializers
 *	$.storage = new $.store( [driver] [, serializers] );
 *		driver		can be the key (e.g. "windowName") or the driver-object itself
 *		serializers	can be a list of named serializers like $.store.serializers
 **********************************************************************************
 * USAGE EXAMPLES:
 **********************************************************************************
 *	$.storage.get( key );			// retrieves a value
 *	$.storage.set( key, value );	// saves a value
 *	$.storage.del( key );			// deletes a value
 *	$.storage.flush();				// deletes aall values
 **********************************************************************************
 */

(function($,undefined){

/**********************************************************************************
 * $.store base and convinience accessor
 **********************************************************************************/

$.store = function( driver, serializers )
{
	var that = this;
	
	if( typeof driver == 'string' )
	{
		if( $.store.drivers[ driver ] )
			this.driver = $.store.drivers[ driver ];
		else
			throw new Error( 'Unknown driver '+ driver );
	}
	else if( typeof driver == 'object' )
	{
		var invalidAPI = !$.isFunction( driver.init )
			|| !$.isFunction( driver.get )
			|| !$.isFunction( driver.set )
			|| !$.isFunction( driver.del )
			|| !$.isFunction( driver.flush );
			
		if( invalidAPI )
			throw new Error( 'The specified driver does not fulfill the API requirements' );
		
		this.driver = driver;
	}
	else
	{
		// detect and initialize storage driver
		$.each( $.store.drivers, function()
		{
			// skip unavailable drivers
			if( !$.isFunction( this.available ) || !this.available() )
				return true; // continue;
			
			that.driver = this;
			if( that.driver.init() === false )
			{
				that.driver = null;
				return true; // continue;
			}
			
			return false; // break;
		});
	}
	
	// use default serializers if not told otherwise
	if( !serializers )
		serializers = $.store.serializers;
	
	// intialize serializers
	this.serializers = {};
	$.each( serializers, function( key, serializer )
	{
		// skip invalid processors
		if( !$.isFunction( this.init ) )
			return true; // continue;
		
		that.serializers[ key ] = this;
		that.serializers[ key ].init( that.encoders, that.decoders );
	});
};


/**********************************************************************************
 * $.store API
 **********************************************************************************/

$.extend( $.store.prototype, {
	get: function( key )
	{
		var value = this.driver.get( key );
		return this.driver.encodes ? value : this.unserialize( value );
	},
	set: function( key, value )
	{
		this.driver.set( key, this.driver.encodes ? value : this.serialize( value ) );
	},
	del: function( key )
	{
		this.driver.del( key );
	},
	flush: function()
	{
		this.driver.flush();
	},
	driver : undefined,
	encoders : [],
	decoders : [],
	serialize: function( value )
	{
		var that = this;
		
		$.each( this.encoders, function()
		{
			var serializer = that.serializers[ this + "" ];
			if( !serializer || !serializer.encode )
				return true; // continue;
			try
			{
				value = serializer.encode( value );
			}
			catch( e ){}
		});

		return value;
	},
	unserialize: function( value )
	{
		var that = this;
		if( !value )
			return value;
		
		$.each( this.decoders, function()
		{
			var serializer = that.serializers[ this + "" ];
			if( !serializer || !serializer.decode )
				return true; // continue;

			value = serializer.decode( value );
		});

		return value;
	}
});


/**********************************************************************************
 * $.store drivers
 **********************************************************************************/

$.store.drivers = {
	// Firefox 3.5, Safari 4.0, Chrome 5, Opera 10.5, IE8
	'localStorage': {
		// see https://developer.mozilla.org/en/dom/storage#localStorage
		ident: "$.store.drivers.localStorage",
		scope: 'browser',
		available: function()
		{
			try
			{
				return !!window.localStorage;
			}
			catch(e)
			{
				// Firefox won't allow localStorage if cookies are disabled
				return false;
			}
		},
		init: $.noop,
		get: function( key )
		{
			return window.localStorage.getItem( key );
		},
		set: function( key, value )
		{
			window.localStorage.setItem( key, value );
		},
		del: function( key )
		{
			window.localStorage.removeItem( key );
		},
		flush: function()
		{
			window.localStorage.clear();
		}
	},
	
	// IE6, IE7
	'userData': {
		// see http://msdn.microsoft.com/en-us/library/ms531424.aspx
		ident: "$.store.drivers.userData",
		element: null,
		nodeName: 'userdatadriver',
		scope: 'browser',
		initialized: false,
		available: function()
		{
			try
			{
				return !!( document.documentElement && document.documentElement.addBehavior );
			}
			catch(e)
			{
				return false;
			}
		},
		init: function()
		{
			// $.store can only utilize one userData store at a time, thus avoid duplicate initialization
			if( this.initialized )
				return;
			
			try
			{
				// Create a non-existing element and append it to the root element (html)
				this.element = document.createElement( this.nodeName );
				document.documentElement.insertBefore( this.element, document.getElementsByTagName('title')[0] );
				// Apply userData behavior
				this.element.addBehavior( "#default#userData" );
				this.initialized = true;
			}
			catch( e )
			{
				return false; 
			}
		},
		get: function( key )
		{
			this.element.load( this.nodeName );
			return this.element.getAttribute( key );
		},
		set: function( key, value )
		{
			this.element.setAttribute( key, value );
			this.element.save( this.nodeName );
		},
		del: function( key )
		{
			this.element.removeAttribute( key );
			this.element.save( this.nodeName );
			
		},
		flush: function()
		{
			// flush by expiration
			this.element.expires = (new Date).toUTCString();
			this.element.save( this.nodeName );
		}
	},
	
	// most other browsers
	'windowName': {
		ident: "$.store.drivers.windowName",
		scope: 'window',
		cache: {},
		encodes: true,
		available: function()
		{
			return true;
		},
		init: function()
		{
			this.load();
		},
		save: function()
		{
			window.name = $.store.serializers.json.encode( this.cache );
		},
		load: function()
		{
			try
			{
				this.cache = $.store.serializers.json.decode( window.name + "" );
				if( typeof this.cache != "object" )
					this.cache = {};
			}
			catch(e)
			{
				this.cache = {};
				window.name = "{}";
			}
		},
		get: function( key )
		{
			return this.cache[ key ];
		},
		set: function( key, value )
		{
			this.cache[ key ] = value;
			this.save();
		},
		del: function( key )
		{
			try
			{
				delete this.cache[ key ];
			}
			catch(e)
			{
				this.cache[ key ] = undefined;
			}
			
			this.save();
		},
		flush: function()
		{
			window.name = "{}";
		}
	}
};

/**********************************************************************************
 * $.store serializers
 **********************************************************************************/

$.store.serializers = {
	
	'json': {
		ident: "$.store.serializers.json",
		init: function( encoders, decoders )
		{
			encoders.push( "json" );
			decoders.push( "json" );
		},
		encode: ((typeof(JSON) == 'object')?JSON.stringify:$.JSON.stringify),
		decode: ((typeof(JSON) == 'object')?JSON.parse:$.JSON.parse)
	},
	
	// TODO: html serializer
	// 'html' : {},
	
	'xml': {
		ident: "$.store.serializers.xml",
		init: function( encoders, decoders )
		{
			encoders.unshift( "xml" );
			decoders.push( "xml" );
		},
		
		// wouldn't be necessary if jQuery exposed this function
		isXML: function( value )
		{
			var documentElement = ( value ? value.ownerDocument || value : 0 ).documentElement;
			return documentElement ? documentElement.nodeName.toLowerCase() !== "html" : false;
		},

		// encodes a XML node to string (taken from $.jStorage, MIT License)
		encode: function( value )
		{
			if( !value || value._serialized || !this.isXML( value ) )
				return value;

			var _value = { _serialized: this.ident, value: value };
			
			try
			{
				// Mozilla, Webkit, Opera
				_value.value = new XMLSerializer().serializeToString( value );
				return _value;
			}
			catch(E1)
			{
				try
				{
					// Internet Explorer
					_value.value = value.xml;
					return _value;
				}
				catch(E2){}
			}
			
			return value;
		},
		
		// decodes a XML node from string (taken from $.jStorage, MIT License)
		decode: function( value )
		{
			if( !value || !value._serialized || value._serialized != this.ident )
				return value;

			var dom_parser = ( "DOMParser" in window && (new DOMParser()).parseFromString );
			if( !dom_parser && window.ActiveXObject )
			{
				dom_parser = function( _xmlString )
				{
					var xml_doc = new ActiveXObject( 'Microsoft.XMLDOM' );
					xml_doc.async = 'false';
					xml_doc.loadXML( _xmlString );
					return xml_doc;
				}
			}

			if( !dom_parser )
			{
				return undefined;
			}
			
			value.value = dom_parser.call(
				"DOMParser" in window && (new DOMParser()) || window, 
				value.value, 
				'text/xml'
			);
			
			return this.isXML( value.value ) ? value.value : undefined;
		}
	}
};

})(jQuery);;
/*! jQuery UI - v1.8.24 - 2012-09-28
* https://github.com/jquery/jquery-ui
* Includes: jquery.ui.position.js
* Copyright (c) 2012 AUTHORS.txt; Licensed MIT, GPL */
(function(a,b){a.ui=a.ui||{};var c=/left|center|right/,d=/top|center|bottom/,e="center",f={},g=a.fn.position,h=a.fn.offset;a.fn.position=function(b){if(!b||!b.of)return g.apply(this,arguments);b=a.extend({},b);var h=a(b.of),i=h[0],j=(b.collision||"flip").split(" "),k=b.offset?b.offset.split(" "):[0,0],l,m,n;return i.nodeType===9?(l=h.width(),m=h.height(),n={top:0,left:0}):i.setTimeout?(l=h.width(),m=h.height(),n={top:h.scrollTop(),left:h.scrollLeft()}):i.preventDefault?(b.at="left top",l=m=0,n={top:b.of.pageY,left:b.of.pageX}):(l=h.outerWidth(),m=h.outerHeight(),n=h.offset()),a.each(["my","at"],function(){var a=(b[this]||"").split(" ");a.length===1&&(a=c.test(a[0])?a.concat([e]):d.test(a[0])?[e].concat(a):[e,e]),a[0]=c.test(a[0])?a[0]:e,a[1]=d.test(a[1])?a[1]:e,b[this]=a}),j.length===1&&(j[1]=j[0]),k[0]=parseInt(k[0],10)||0,k.length===1&&(k[1]=k[0]),k[1]=parseInt(k[1],10)||0,b.at[0]==="right"?n.left+=l:b.at[0]===e&&(n.left+=l/2),b.at[1]==="bottom"?n.top+=m:b.at[1]===e&&(n.top+=m/2),n.left+=k[0],n.top+=k[1],this.each(function(){var c=a(this),d=c.outerWidth(),g=c.outerHeight(),h=parseInt(a.curCSS(this,"marginLeft",!0))||0,i=parseInt(a.curCSS(this,"marginTop",!0))||0,o=d+h+(parseInt(a.curCSS(this,"marginRight",!0))||0),p=g+i+(parseInt(a.curCSS(this,"marginBottom",!0))||0),q=a.extend({},n),r;b.my[0]==="right"?q.left-=d:b.my[0]===e&&(q.left-=d/2),b.my[1]==="bottom"?q.top-=g:b.my[1]===e&&(q.top-=g/2),f.fractions||(q.left=Math.round(q.left),q.top=Math.round(q.top)),r={left:q.left-h,top:q.top-i},a.each(["left","top"],function(c,e){a.ui.position[j[c]]&&a.ui.position[j[c]][e](q,{targetWidth:l,targetHeight:m,elemWidth:d,elemHeight:g,collisionPosition:r,collisionWidth:o,collisionHeight:p,offset:k,my:b.my,at:b.at})}),a.fn.bgiframe&&c.bgiframe(),c.offset(a.extend(q,{using:b.using}))})},a.ui.position={fit:{left:function(b,c){var d=a(window),e=c.collisionPosition.left+c.collisionWidth-d.width()-d.scrollLeft();b.left=e>0?b.left-e:Math.max(b.left-c.collisionPosition.left,b.left)},top:function(b,c){var d=a(window),e=c.collisionPosition.top+c.collisionHeight-d.height()-d.scrollTop();b.top=e>0?b.top-e:Math.max(b.top-c.collisionPosition.top,b.top)}},flip:{left:function(b,c){if(c.at[0]===e)return;var d=a(window),f=c.collisionPosition.left+c.collisionWidth-d.width()-d.scrollLeft(),g=c.my[0]==="left"?-c.elemWidth:c.my[0]==="right"?c.elemWidth:0,h=c.at[0]==="left"?c.targetWidth:-c.targetWidth,i=-2*c.offset[0];b.left+=c.collisionPosition.left<0?g+h+i:f>0?g+h+i:0},top:function(b,c){if(c.at[1]===e)return;var d=a(window),f=c.collisionPosition.top+c.collisionHeight-d.height()-d.scrollTop(),g=c.my[1]==="top"?-c.elemHeight:c.my[1]==="bottom"?c.elemHeight:0,h=c.at[1]==="top"?c.targetHeight:-c.targetHeight,i=-2*c.offset[1];b.top+=c.collisionPosition.top<0?g+h+i:f>0?g+h+i:0}}},a.offset.setOffset||(a.offset.setOffset=function(b,c){/static/.test(a.curCSS(b,"position"))&&(b.style.position="relative");var d=a(b),e=d.offset(),f=parseInt(a.curCSS(b,"top",!0),10)||0,g=parseInt(a.curCSS(b,"left",!0),10)||0,h={top:c.top-e.top+f,left:c.left-e.left+g};"using"in c?c.using.call(b,h):d.css(h)},a.fn.offset=function(b){var c=this[0];return!c||!c.ownerDocument?null:b?a.isFunction(b)?this.each(function(c){a(this).offset(b.call(this,c,a(this).offset()))}):this.each(function(){a.offset.setOffset(this,b)}):h.call(this)}),a.curCSS||(a.curCSS=a.css),function(){var b=document.getElementsByTagName("body")[0],c=document.createElement("div"),d,e,g,h,i;d=document.createElement(b?"div":"body"),g={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},b&&a.extend(g,{position:"absolute",left:"-1000px",top:"-1000px"});for(var j in g)d.style[j]=g[j];d.appendChild(c),e=b||document.documentElement,e.insertBefore(d,e.firstChild),c.style.cssText="position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;",h=a(c).offset(function(a,b){return b}).offset(),d.innerHTML="",e.removeChild(d),i=h.top+h.left+(b?2e3:0),f.fractions=i>21&&i<22}()})(jQuery);;
/*
 * jQuery UI Autocomplete 1.8.2
 *
 * Copyright (c) 2010 AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT (MIT-LICENSE.txt)
 * and GPL (GPL-LICENSE.txt) licenses.
 *
 * http://docs.jquery.com/UI/Autocomplete
 *
 * Depends:
 *	jquery.ui.core.js
 *	jquery.ui.widget.js
 *	jquery.ui.position.js
 */
(function(e){e.widget("ui.autocomplete",{options:{minLength:1,delay:300},_create:function(){var a=this,c=this.element[0].ownerDocument;this.element.addClass("ui-autocomplete-input").attr("autocomplete","off").attr({role:"textbox","aria-autocomplete":"list","aria-haspopup":"true"}).bind("keydown.autocomplete",function(d){var b=e.ui.keyCode;switch(d.keyCode){case b.PAGE_UP:a._move("previousPage",d);break;case b.PAGE_DOWN:a._move("nextPage",d);break;case b.UP:a._move("previous",d);d.preventDefault();
break;case b.DOWN:a._move("next",d);d.preventDefault();break;case b.ENTER:case b.NUMPAD_ENTER:a.menu.active&&d.preventDefault();case b.TAB:if(!a.menu.active)return;a.menu.select(d);break;case b.ESCAPE:a.element.val(a.term);a.close(d);break;case b.LEFT:case b.RIGHT:case b.SHIFT:case b.CONTROL:case b.ALT:case b.COMMAND:case b.COMMAND_RIGHT:case b.INSERT:case b.CAPS_LOCK:case b.END:case b.HOME:break;default:clearTimeout(a.searching);a.searching=setTimeout(function(){a.search(null,d)},a.options.delay);
break}}).bind("focus.autocomplete",function(){a.selectedItem=null;a.previous=a.element.val()}).bind("blur.autocomplete",function(d){clearTimeout(a.searching);a.closing=setTimeout(function(){a.close(d);a._change(d)},150)});this._initSource();this.response=function(){return a._response.apply(a,arguments)};this.menu=e("<ul></ul>").addClass("ui-autocomplete").appendTo("body",c).mousedown(function(){setTimeout(function(){clearTimeout(a.closing)},13)}).menu({focus:function(d,b){b=b.item.data("item.autocomplete");
false!==a._trigger("focus",null,{item:b})&&/^key/.test(d.originalEvent.type)&&a.element.val(b.value)},selected:function(d,b){b=b.item.data("item.autocomplete");false!==a._trigger("select",d,{item:b})&&a.element.val(b.value);a.close(d);d=a.previous;if(a.element[0]!==c.activeElement){a.element.focus();a.previous=d}a.selectedItem=b},blur:function(){a.menu.element.is(":visible")&&a.element.val(a.term)}}).zIndex(this.element.zIndex()+1).css({top:0,left:0}).hide().data("menu");e.fn.bgiframe&&this.menu.element.bgiframe()},
destroy:function(){this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup");this.menu.element.remove();e.Widget.prototype.destroy.call(this)},_setOption:function(a){e.Widget.prototype._setOption.apply(this,arguments);a==="source"&&this._initSource()},_initSource:function(){var a,c;if(e.isArray(this.options.source)){a=this.options.source;this.source=function(d,b){b(e.ui.autocomplete.filter(a,d.term))}}else if(typeof this.options.source===
"string"){c=this.options.source;this.source=function(d,b){e.getJSON(c,d,b)}}else this.source=this.options.source},search:function(a,c){a=a!=null?a:this.element.val();if(a.length<this.options.minLength)return this.close(c);clearTimeout(this.closing);if(this._trigger("search")!==false)return this._search(a)},_search:function(a){this.term=this.element.addClass("ui-autocomplete-loading").val();this.source({term:a},this.response)},_response:function(a){if(a.length){a=this._normalize(a);this._suggest(a);
this._trigger("open")}else this.close();this.element.removeClass("ui-autocomplete-loading")},close:function(a){clearTimeout(this.closing);if(this.menu.element.is(":visible")){this._trigger("close",a);this.menu.element.hide();this.menu.deactivate()}},_change:function(a){this.previous!==this.element.val()&&this._trigger("change",a,{item:this.selectedItem})},_normalize:function(a){if(a.length&&a[0].label&&a[0].value)return a;return e.map(a,function(c){if(typeof c==="string")return{label:c,value:c};return e.extend({label:c.label||
c.value,value:c.value||c.label},c)})},_suggest:function(a){var c=this.menu.element.empty().zIndex(this.element.zIndex()+1),d;this._renderMenu(c,a);this.menu.deactivate();this.menu.refresh();this.menu.element.show().position({my:"left top",at:"left bottom",of:this.element,collision:"none"});a=c.width("").width();d=this.element.width();c.width(Math.max(a,d))},_renderMenu:function(a,c){var d=this;e.each(c,function(b,f){d._renderItem(a,f)})},_renderItem:function(a,c){return e("<li></li>").data("item.autocomplete",
c).append("<a>"+c.label+"</a>").appendTo(a)},_move:function(a,c){if(this.menu.element.is(":visible"))if(this.menu.first()&&/^previous/.test(a)||this.menu.last()&&/^next/.test(a)){this.element.val(this.term);this.menu.deactivate()}else this.menu[a](c);else this.search(null,c)},widget:function(){return this.menu.element}});e.extend(e.ui.autocomplete,{escapeRegex:function(a){return a.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi,"\\$1")},filter:function(a,c){var d=new RegExp(e.ui.autocomplete.escapeRegex(c),
"i");return e.grep(a,function(b){return d.test(b.label||b.value||b)})}})})(jQuery);
(function(e){e.widget("ui.menu",{_create:function(){var a=this;this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({role:"listbox","aria-activedescendant":"ui-active-menuitem"}).click(function(c){if(e(c.target).closest(".ui-menu-item a").length){c.preventDefault();a.select(c)}});this.refresh()},refresh:function(){var a=this;this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","menuitem").children("a").addClass("ui-corner-all").attr("tabindex",
-1).mouseenter(function(c){a.activate(c,e(this).parent())}).mouseleave(function(){a.deactivate()})},activate:function(a,c){this.deactivate();if(this.hasScroll()){var d=c.offset().top-this.element.offset().top,b=this.element.attr("scrollTop"),f=this.element.height();if(d<0)this.element.attr("scrollTop",b+d);else d>f&&this.element.attr("scrollTop",b+d-f+c.height())}this.active=c.eq(0).children("a").addClass("ui-state-hover").attr("id","ui-active-menuitem").end();this._trigger("focus",a,{item:c})},deactivate:function(){if(this.active){this.active.children("a").removeClass("ui-state-hover").removeAttr("id");
this._trigger("blur");this.active=null}},next:function(a){this.move("next",".ui-menu-item:first",a)},previous:function(a){this.move("prev",".ui-menu-item:last",a)},first:function(){return this.active&&!this.active.prev().length},last:function(){return this.active&&!this.active.next().length},move:function(a,c,d){if(this.active){a=this.active[a+"All"](".ui-menu-item").eq(0);a.length?this.activate(d,a):this.activate(d,this.element.children(c))}else this.activate(d,this.element.children(c))},nextPage:function(a){if(this.hasScroll())if(!this.active||
this.last())this.activate(a,this.element.children(":first"));else{var c=this.active.offset().top,d=this.element.height(),b=this.element.children("li").filter(function(){var f=e(this).offset().top-c-d+e(this).height();return f<10&&f>-10});b.length||(b=this.element.children(":last"));this.activate(a,b)}else this.activate(a,this.element.children(!this.active||this.last()?":first":":last"))},previousPage:function(a){if(this.hasScroll())if(!this.active||this.first())this.activate(a,this.element.children(":last"));
else{var c=this.active.offset().top,d=this.element.height();result=this.element.children("li").filter(function(){var b=e(this).offset().top-c+d-e(this).height();return b<10&&b>-10});result.length||(result=this.element.children(":first"));this.activate(a,result)}else this.activate(a,this.element.children(!this.active||this.first()?":last":":first"))},hasScroll:function(){return this.element.height()<this.element.attr("scrollHeight")},select:function(a){this._trigger("selected",a,{item:this.active})}})})(jQuery);
;
/*
 * iButton jQuery Plug-in
 *
 * Copyright 2011 Giva, Inc. (http://www.givainc.com/labs/) 
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 	http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Date: 2011-07-26
 * Rev:  1.0.03
 */
(function(E){E.iButton={version:"1.0.03",setDefaults:function(G){E.extend(F,G)}};E.fn.iButton=function(J){var K=typeof arguments[0]=="string"&&arguments[0];var I=K&&Array.prototype.slice.call(arguments,1)||arguments;var H=(this.length==0)?null:E.data(this[0],"iButton");if(H&&K&&this.length){if(K.toLowerCase()=="object"){return H}else{if(H[K]){var G;this.each(function(L){var M=E.data(this,"iButton")[K].apply(H,I);if(L==0&&M){if(!!M.jquery){G=E([]).add(M)}else{G=M;return false}}else{if(!!M&&!!M.jquery){G=G.add(M)}}});return G||this}else{return this}}}else{return this.each(function(){new C(this,J)})}};var A=0;E.browser.iphone=(navigator.userAgent.toLowerCase().indexOf("iphone")>-1);var C=function(N,I){var S=this,H=E(N),T=++A,K=false,U={},O={dragging:false,clicked:null},W={position:null,offset:null,time:null},I=E.extend({},F,I,(!!E.metadata?H.metadata():{})),Y=(I.labelOn==B&&I.labelOff==D),Z=":checkbox, :radio";if(!H.is(Z)){return H.find(Z).iButton(I)}else{if(E.data(H[0],"iButton")){return }}E.data(H[0],"iButton",S);if(I.resizeHandle=="auto"){I.resizeHandle=!Y}if(I.resizeContainer=="auto"){I.resizeContainer=!Y}this.toggle=function(b){var a=(arguments.length>0)?b:!H[0].checked;H.attr("checked",a).trigger("change")};this.disable=function(b){var a=(arguments.length>0)?b:!K;K=a;H.attr("disabled",a);V[a?"addClass":"removeClass"](I.classDisabled);if(E.isFunction(I.disable)){I.disable.apply(S,[K,H,I])}};this.repaint=function(){X()};this.destroy=function(){E([H[0],V[0]]).unbind(".iButton");E(document).unbind(".iButton_"+T);V.after(H).remove();E.data(H[0],"iButton",null);if(E.isFunction(I.destroy)){I.destroy.apply(S,[H,I])}};H.wrap('<div class="'+E.trim(I.classContainer+" "+I.className)+'" />').after('<div class="'+I.classHandle+'"><div class="'+I.classHandleRight+'"><div class="'+I.classHandleMiddle+'" /></div></div><div class="'+I.classLabelOff+'"><span><label>'+I.labelOff+'</label></span></div><div class="'+I.classLabelOn+'"><span><label>'+I.labelOn+'</label></span></div><div class="'+I.classPaddingLeft+'"></div><div class="'+I.classPaddingRight+'"></div>');var V=H.parent(),G=H.siblings("."+I.classHandle),P=H.siblings("."+I.classLabelOff),M=P.children("span"),J=H.siblings("."+I.classLabelOn),L=J.children("span");if(I.resizeHandle||I.resizeContainer){U.onspan=L.outerWidth();U.offspan=M.outerWidth()}if(I.resizeHandle){U.handle=Math.min(U.onspan,U.offspan);G.css("width",U.handle)}else{U.handle=G.width()}if(I.resizeContainer){U.container=(Math.max(U.onspan,U.offspan)+U.handle+20);V.css("width",U.container);P.css("width",U.container-5)}else{U.container=V.width()}var R=U.container-U.handle-6;var X=function(b){var c=H[0].checked,a=(c)?R:0,b=(arguments.length>0)?arguments[0]:true;if(b&&I.enableFx){G.stop().animate({left:a},I.duration,I.easing);J.stop().animate({width:a+4},I.duration,I.easing);L.stop().animate({marginLeft:a-R},I.duration,I.easing);M.stop().animate({marginRight:-a},I.duration,I.easing)}else{G.css("left",a);J.css("width",a+4);L.css("marginLeft",a-R);M.css("marginRight",-a)}};X(false);var Q=function(a){return a.pageX||((a.originalEvent.changedTouches)?a.originalEvent.changedTouches[0].pageX:0)};V.bind("mousedown.iButton touchstart.iButton",function(a){if(E(a.target).is(Z)||K||(!I.allowRadioUncheck&&H.is(":radio:checked"))){return }a.preventDefault();O.clicked=G;W.position=Q(a);W.offset=W.position-(parseInt(G.css("left"),10)||0);W.time=(new Date()).getTime();return false});if(I.enableDrag){E(document).bind("mousemove.iButton_"+T+" touchmove.iButton_"+T,function(c){if(O.clicked!=G){return }c.preventDefault();var a=Q(c);if(a!=W.offset){O.dragging=true;V.addClass(I.classHandleActive)}var b=Math.min(1,Math.max(0,(a-W.offset)/R));G.css("left",b*R);J.css("width",b*R+4);M.css("marginRight",-b*R);L.css("marginLeft",-(1-b)*R);return false})}E(document).bind("mouseup.iButton_"+T+" touchend.iButton_"+T,function(d){if(O.clicked!=G){return}d.preventDefault();var f=true;if(!O.dragging||(((new Date()).getTime()-W.time)<I.clickOffset)){var b=H[0].checked;H.attr("checked",!b);if(E.isFunction(I.click)){I.click.apply(S,[!b,H,I])}}else{var a=Q(d);var c=(a-W.offset)/R;var b=(c>=0.5);if(H[0].checked==b){f=false}H.attr("checked",b)}V.removeClass(I.classHandleActive);O.clicked=null;O.dragging=null;if(f){H.trigger("change")}else{X()}return false});H.bind("change.iButton",function(){X();if(H.is(":radio")){var b=H[0];var a=E(b.form?b.form[b.name]:":radio[name="+b.name+"]");a.filter(":not(:checked)").iButton("repaint")}if(E.isFunction(I.change)){I.change.apply(S,[H,I])}}).bind("focus.iButton",function(){V.addClass(I.classFocus)}).bind("blur.iButton",function(){V.removeClass(I.classFocus)});if(E.isFunction(I.click)){H.bind("click.iButton",function(){I.click.apply(S,[H[0].checked,H,I])})}if(H.is(":disabled")){this.disable(true)}if(E.browser.msie){V.find("*").andSelf().attr("unselectable","on");H.bind("click.iButton",function(){H.triggerHandler("change.iButton")})}if(E.isFunction(I.init)){I.init.apply(S,[H,I])}};var F={duration:200,easing:"swing",labelOn:"ON",labelOff:"OFF",resizeHandle:"auto",resizeContainer:"auto",enableDrag:true,enableFx:true,allowRadioUncheck:false,clickOffset:120,className:"",classContainer:"ibutton-container",classDisabled:"ibutton-disabled",classFocus:"ibutton-focus",classLabelOn:"ibutton-label-on",classLabelOff:"ibutton-label-off",classHandle:"ibutton-handle",classHandleMiddle:"ibutton-handle-middle",classHandleRight:"ibutton-handle-right",classHandleActive:"ibutton-active-handle",classPaddingLeft:"ibutton-padding-left",classPaddingRight:"ibutton-padding-right",init:null,change:null,click:null,disable:null,destroy:null},B=F.labelOn,D=F.labelOff})(jQuery);;
/**
 * Farbtastic Color Picker 1.2
 * © 2008 Steven Wittens
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

(function ($) {

    $.fn.farbtastic = function (options) {
        $.farbtastic(this, options);
        return this;
    };

    $.farbtastic = function (container, callback) {
        container = $(container).get(0);
        return container.farbtastic || (container.farbtastic = new $._farbtastic(container, callback));
    };

    $._farbtastic = function (container, callback) {
        // Store farbtastic object
        var fb = this;

        // Insert markup
        $(container).html('<div class="farbtastic"><div class="color"></div><div class="wheel"></div><div class="overlay"></div><div class="h-marker marker"></div><div class="sl-marker marker"></div></div>');
        var e = $('.farbtastic', container);
        fb.wheel = $('.wheel', container).get(0);
        // Dimensions
        fb.radius = 84;
        fb.square = 100;
        fb.width = 194;

        // Fix background PNGs in IE6
        if (navigator.appVersion.match(/MSIE [0-6]\./)) {
            $('*', e).each(function () {
                if (this.currentStyle.backgroundImage != 'none') {
                    var image = this.currentStyle.backgroundImage;
                    image = this.currentStyle.backgroundImage.substring(5, image.length - 2);
                    $(this).css({
                        'backgroundImage': 'none',
                        'filter': "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=crop, src='" + image + "')"
                    });
                }
            });
        }

        /**
         * Link to the given element(s) or callback.
         */
        fb.linkTo = function (callback) {
            // Unbind previous nodes
            if (typeof fb.callback == 'object') {
                $(fb.callback).unbind('keyup', fb.updateValue);
            }

            // Reset color
            fb.color = null;

            // Bind callback or elements
            if (typeof callback == 'function') {
                fb.callback = callback;
            }
            else if (typeof callback == 'object' || typeof callback == 'string') {
                fb.callback = $(callback);
                fb.callback.bind('keyup', fb.updateValue);
                if (fb.callback.get(0).value) {
                    fb.setColor(fb.callback.get(0).value);
                }
            }
            return this;
        };
        fb.updateValue = function () {
            if (this.value && this.value != fb.color) {
                fb.setColor(this.value);
            }
        };

        /**
         * Change color with HTML syntax #123456
         */
        fb.setColor = function (color) {
            var unpack = fb.unpack(color);
            if (fb.color != color && unpack) {
                fb.color = color;
                fb.rgb = unpack;
                fb.hsl = fb.RGBToHSL(fb.rgb);
                fb.updateDisplay();
            }
            return this;
        };

        /**
         * Change color with HSL triplet [0..1, 0..1, 0..1]
         */
        fb.setHSL = function (hsl) {
            fb.hsl = hsl;
            fb.rgb = fb.HSLToRGB(hsl);
            fb.color = fb.pack(fb.rgb);
            fb.updateDisplay();
            return this;
        };

        /////////////////////////////////////////////////////

        /**
         * Retrieve the coordinates of the given event relative to the center
         * of the widget.
         */
        fb.widgetCoords = function (event) {
            var offset = $(fb.wheel).offset();
            return {x: (event.pageX - offset.left) - fb.width / 2, y: (event.pageY - offset.top) - fb.width / 2};
        };

        /**
         * Mousedown handler
         */
        fb.mousedown = function (event) {
            // Capture mouse
            if (!document.dragging) {
                $(document).bind('mousemove', fb.mousemove).bind('mouseup', fb.mouseup);
                document.dragging = true;
            }

            // Check which area is being dragged
            var pos = fb.widgetCoords(event);
            fb.circleDrag = Math.max(Math.abs(pos.x), Math.abs(pos.y)) * 2 > fb.square;

            // Process
            fb.mousemove(event);
            return false;
        };

        /**
         * Mousemove handler
         */
        fb.mousemove = function (event) {
            // Get coordinates relative to color picker center
            var pos = fb.widgetCoords(event);

            // Set new HSL parameters
            if (fb.circleDrag) {
                var hue = Math.atan2(pos.x, -pos.y) / 6.28;
                if (hue < 0) hue += 1;
                fb.setHSL([hue, fb.hsl[1], fb.hsl[2]]);
            }
            else {
                var sat = Math.max(0, Math.min(1, -(pos.x / fb.square) + .5));
                var lum = Math.max(0, Math.min(1, -(pos.y / fb.square) + .5));
                fb.setHSL([fb.hsl[0], sat, lum]);
            }
            return false;
        };

        /**
         * Mouseup handler
         */
        fb.mouseup = function () {
            // Uncapture mouse
            $(document).unbind('mousemove', fb.mousemove);
            $(document).unbind('mouseup', fb.mouseup);
            document.dragging = false;
        };

        /**
         * Update the markers and styles
         */
        fb.updateDisplay = function () {
            // Markers
            var angle = fb.hsl[0] * 6.28;
            $('.h-marker', e).css({
                left: Math.round(Math.sin(angle) * fb.radius + fb.width / 2) + 'px',
                top: Math.round(-Math.cos(angle) * fb.radius + fb.width / 2) + 'px'
            });

            $('.sl-marker', e).css({
                left: Math.round(fb.square * (.5 - fb.hsl[1]) + fb.width / 2) + 'px',
                top: Math.round(fb.square * (.5 - fb.hsl[2]) + fb.width / 2) + 'px'
            });

            // Saturation/Luminance gradient
            $('.color', e).css('backgroundColor', fb.pack(fb.HSLToRGB([fb.hsl[0], 1, 0.5])));

            // Linked elements or callback
            if (typeof fb.callback == 'object') {
                // Set background/foreground color
                $(fb.callback).css({
                    backgroundColor: fb.color,
                    color: fb.hsl[2] > 0.5 ? '#000' : '#fff'
                });

                // Change linked value
                $(fb.callback).each(function () {
                    if (this.value && this.value != fb.color) {
                        this.value = fb.color;
                    }
                });
            }
            else if (typeof fb.callback == 'function') {
                fb.callback.call(fb, fb.color);
            }
        };

        /* Various color utility functions */
        fb.pack = function (rgb) {
            var r = Math.round(rgb[0] * 255);
            var g = Math.round(rgb[1] * 255);
            var b = Math.round(rgb[2] * 255);
            return '#' + (r < 16 ? '0' : '') + r.toString(16) +
                (g < 16 ? '0' : '') + g.toString(16) +
                (b < 16 ? '0' : '') + b.toString(16);
        };

        fb.unpack = function (color) {
            if (color.length == 7) {
                return [parseInt('0x' + color.substring(1, 3)) / 255,
                    parseInt('0x' + color.substring(3, 5)) / 255,
                    parseInt('0x' + color.substring(5, 7)) / 255];
            }
            else if (color.length == 4) {
                return [parseInt('0x' + color.substring(1, 2)) / 15,
                    parseInt('0x' + color.substring(2, 3)) / 15,
                    parseInt('0x' + color.substring(3, 4)) / 15];
            }
        };

        fb.HSLToRGB = function (hsl) {
            var m1, m2;
            var h = hsl[0], s = hsl[1], l = hsl[2];
            m2 = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
            m1 = l * 2 - m2;
            return [this.hueToRGB(m1, m2, h + 0.33333),
                this.hueToRGB(m1, m2, h),
                this.hueToRGB(m1, m2, h - 0.33333)];
        };

        fb.hueToRGB = function (m1, m2, h) {
            h = (h < 0) ? h + 1 : ((h > 1) ? h - 1 : h);
            if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
            if (h * 2 < 1) return m2;
            if (h * 3 < 2) return m1 + (m2 - m1) * (0.66666 - h) * 6;
            return m1;
        };

        fb.RGBToHSL = function (rgb) {
            var min, max, delta, h, s, l;
            var r = rgb[0], g = rgb[1], b = rgb[2];
            min = Math.min(r, Math.min(g, b));
            max = Math.max(r, Math.max(g, b));
            delta = max - min;
            l = (min + max) / 2;
            s = 0;
            if (l > 0 && l < 1) {
                s = delta / (l < 0.5 ? (2 * l) : (2 - 2 * l));
            }
            h = 0;
            if (delta > 0) {
                if (max == r && max != g) h += (g - b) / delta;
                if (max == g && max != b) h += (2 + (b - r) / delta);
                if (max == b && max != r) h += (4 + (r - g) / delta);
                h /= 6;
            }
            return [h, s, l];
        };

        // Install mousedown handler (the others are set on the document on-demand)
        $('*', e).mousedown(fb.mousedown);

        // Init color
        fb.setColor('#000000');

        // Set linked elements/callback
        if (callback) {
            fb.linkTo(callback);
        }
    };

})(jQuery);
;
(function(a){var b=new Array;var c=new Array;a.fn.doAutosize=function(b){var c=a(this).data("minwidth"),d=a(this).data("maxwidth"),e="",f=a(this),g=a("#"+a(this).data("tester_id"));if(e===(e=f.val())){return;}var h=e.replace(/&/g,"&").replace(/\s/g," ").replace(/</g,"<").replace(/>/g,">");g.html(h);var i=g.width(),j=i+b.comfortZone>=c?i+b.comfortZone:c,k=f.width(),l=j<k&&j>=c||j>c&&j<d;if(l){f.width(j);}};a.fn.resetAutosize=function(b){var c=a(this).data("minwidth")||b.minInputWidth||a(this).width(),d=a(this).data("maxwidth")||b.maxInputWidth||a(this).closest(".tagsinput").width()-b.inputPadding,f=a(this),g=a("<tester/>").css({position:"absolute",top:-9999,left:-9999,width:"auto",fontSize:f.css("fontSize"),fontFamily:f.css("fontFamily"),fontWeight:f.css("fontWeight"),letterSpacing:f.css("letterSpacing"),whiteSpace:"nowrap"}),h=a(this).attr("id")+"_autosize_tester";if(!a("#"+h).length>0){g.attr("id",h);g.appendTo("body");}f.data("minwidth",c);f.data("maxwidth",d);f.data("tester_id",h);f.css("width",c);};a.fn.addTag=function(d,e){e=jQuery.extend({focus:false,callback:true},e);this.each(function(){var f=a(this).attr("id");var g=a(this).val().split(b[f]);if(g[0]==""){g=new Array;}d=jQuery.trim(d);var h;if(e.unique){h=a(g).tagExist(d);if(h==true){a("#"+f+"_tag").addClass("not_valid");}}else{h=false;}if(d!=""&&h!=true){a("<span>").addClass("tag").append(a("<span>").text(d).append("  "),a("<a>",{href:"#",title:"Removing tag",text:"x"}).click(function(){return a("#"+f).removeTag(escape(d));})).insertBefore("#"+f+"_addTag");g.push(d);a("#"+f+"_tag").val("");if(e.focus){a("#"+f+"_tag").focus();}else{a("#"+f+"_tag").blur();}a.fn.tagsInput.updateTagsField(this,g);if(e.callback&&c[f]&&c[f]["onAddTag"]){var i=c[f]["onAddTag"];i.call(this,d);}if(c[f]&&c[f]["onChange"]){var j=g.length;var i=c[f]["onChange"];i.call(this,a(this),g[j-1]);}}});return false;};a.fn.removeTag=function(d){d=unescape(d);this.each(function(){var e=a(this).attr("id");var f=a(this).val().split(b[e]);a("#"+e+"_tagsinput .tag").remove();str="";for(var i=0;i<f.length;i++){if(f[i]!=d){str=str+b[e]+f[i];}}a.fn.tagsInput.importTags(this,str);if(c[e]&&c[e]["onRemoveTag"]){var g=c[e]["onRemoveTag"];g.call(this,d);}});return false;};a.fn.tagExist=function(b){return jQuery.inArray(b,a(this))>=0;};a.fn.importTags=function(b){id=a(this).attr("id");a("#"+id+"_tagsinput .tag").remove();a.fn.tagsInput.importTags(this,b);};a.fn.tagsInput=function(d){var e=jQuery.extend({interactive:true,defaultText:"add a tag",minChars:0,width:"300px",height:"100px",autocomplete:{selectFirst:false},hide:true,delimiter:",",unique:true,removeWithBackspace:true,placeholderColor:"#666666",autosize:true,comfortZone:20,inputPadding:6*2},d);this.each(function(){if(e.hide){a(this).hide();}var d=a(this).attr("id");var f=jQuery.extend({pid:d,real_input:"#"+d,holder:"#"+d+"_tagsinput",input_wrapper:"#"+d+"_addTag",fake_input:"#"+d+"_tag"},e);b[d]=f.delimiter;if(e.onAddTag||e.onRemoveTag||e.onChange){c[d]=new Array;c[d]["onAddTag"]=e.onAddTag;c[d]["onRemoveTag"]=e.onRemoveTag;c[d]["onChange"]=e.onChange;}var g='<div id="'+d+'_tagsinput" class="tagsinput"><div id="'+d+'_addTag">';if(e.interactive){g=g+'<input id="'+d+'_tag" value="" data-default="'+e.defaultText+'" />';}g=g+'</div><div class="tags_clear"></div></div>';a(g).insertAfter(this);a(f.holder).css("width",e.width);a(f.holder).css("height",e.height);if(a(f.real_input).val()!=""){a.fn.tagsInput.importTags(a(f.real_input),a(f.real_input).val());}if(e.interactive){a(f.fake_input).val(a(f.fake_input).attr("data-default"));a(f.fake_input).css("color",e.placeholderColor);a(f.fake_input).resetAutosize(e);a(f.holder).bind("click",f,function(b){a(b.data.fake_input).focus();});a(f.fake_input).bind("focus",f,function(b){if(a(b.data.fake_input).val()==a(b.data.fake_input).attr("data-default")){a(b.data.fake_input).val("");}a(b.data.fake_input).css("color","#000000");});if(e.autocomplete_url!=undefined){autocomplete_options={source:e.autocomplete_url};for(attrname in e.autocomplete){autocomplete_options[attrname]=e.autocomplete[attrname];}if(jQuery.Autocompleter!==undefined){a(f.fake_input).autocomplete(e.autocomplete_url,e.autocomplete);a(f.fake_input).bind("result",f,function(b,c,f){if(c){a("#"+d).addTag(c[0]+"",{focus:true,unique:e.unique});}});}else if(jQuery.ui.autocomplete!==undefined){a(f.fake_input).autocomplete(autocomplete_options);a(f.fake_input).bind("autocompleteselect",f,function(b,c){a(b.data.real_input).addTag(c.item.value,{focus:true,unique:e.unique});return false;});}}else{a(f.fake_input).bind("blur",f,function(b){var c=a(this).attr("data-default");if(a(b.data.fake_input).val()!=""&&a(b.data.fake_input).val()!=c){if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}}else{a(b.data.fake_input).val(a(b.data.fake_input).attr("data-default"));a(b.data.fake_input).css("color",e.placeholderColor);}return false;});}a(f.fake_input).bind("keypress",f,function(b){if(b.which==b.data.delimiter.charCodeAt(0)||b.which==13){b.preventDefault();if(b.data.minChars<=a(b.data.fake_input).val().length&&(!b.data.maxChars||b.data.maxChars>=a(b.data.fake_input).val().length)){a(b.data.real_input).addTag(a(b.data.fake_input).val(),{focus:true,unique:e.unique});}a(b.data.fake_input).resetAutosize(e);return false;}else if(b.data.autosize){a(b.data.fake_input).doAutosize(e);}});f.removeWithBackspace&&a(f.fake_input).bind("keydown",function(b){if(b.keyCode==8&&a(this).val()==""){b.preventDefault();var c=a(this).closest(".tagsinput").find(".tag:last").text();var d=a(this).attr("id").replace(/_tag$/,"");c=c.replace(/[\s]+x$/,"");a("#"+d).removeTag(escape(c));a(this).trigger("focus");}});a(f.fake_input).blur();if(f.unique){a(f.fake_input).keydown(function(b){if(b.keyCode==8||String.fromCharCode(b.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,\/]+/)){a(this).removeClass("not_valid");}});}}return false;});return this;};a.fn.tagsInput.updateTagsField=function(c,d){var e=a(c).attr("id");a(c).val(d.join(b[e]));};a.fn.tagsInput.importTags=function(d,e){a(d).val("");var f=a(d).attr("id");var g=e.split(b[f]);for(var i=0;i<g.length;i++){a(d).addTag(g[i],{focus:false,callback:false});}if(c[f]&&c[f]["onChange"]){var h=c[f]["onChange"];h.call(d,d,g[i]);}};})(jQuery);
;
/*
 Copyright (C) Federico Zivolo 2019
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */(function(e,t){'object'==typeof exports&&'undefined'!=typeof module?module.exports=t():'function'==typeof define&&define.amd?define(t):e.Popper=t()})(this,function(){'use strict';function e(e){return e&&'[object Function]'==={}.toString.call(e)}function t(e,t){if(1!==e.nodeType)return[];var o=e.ownerDocument.defaultView,n=o.getComputedStyle(e,null);return t?n[t]:n}function o(e){return'HTML'===e.nodeName?e:e.parentNode||e.host}function n(e){if(!e)return document.body;switch(e.nodeName){case'HTML':case'BODY':return e.ownerDocument.body;case'#document':return e.body;}var i=t(e),r=i.overflow,p=i.overflowX,s=i.overflowY;return /(auto|scroll|overlay)/.test(r+s+p)?e:n(o(e))}function r(e){return 11===e?pe:10===e?se:pe||se}function p(e){if(!e)return document.documentElement;for(var o=r(10)?document.body:null,n=e.offsetParent||null;n===o&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&'BODY'!==i&&'HTML'!==i?-1!==['TH','TD','TABLE'].indexOf(n.nodeName)&&'static'===t(n,'position')?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function s(e){var t=e.nodeName;return'BODY'!==t&&('HTML'===t||p(e.firstElementChild)===e)}function d(e){return null===e.parentNode?e:d(e.parentNode)}function a(e,t){if(!e||!e.nodeType||!t||!t.nodeType)return document.documentElement;var o=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,n=o?e:t,i=o?t:e,r=document.createRange();r.setStart(n,0),r.setEnd(i,0);var l=r.commonAncestorContainer;if(e!==l&&t!==l||n.contains(i))return s(l)?l:p(l);var f=d(e);return f.host?a(f.host,t):a(e,d(t).host)}function l(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:'top',o='top'===t?'scrollTop':'scrollLeft',n=e.nodeName;if('BODY'===n||'HTML'===n){var i=e.ownerDocument.documentElement,r=e.ownerDocument.scrollingElement||i;return r[o]}return e[o]}function f(e,t){var o=2<arguments.length&&void 0!==arguments[2]&&arguments[2],n=l(t,'top'),i=l(t,'left'),r=o?-1:1;return e.top+=n*r,e.bottom+=n*r,e.left+=i*r,e.right+=i*r,e}function m(e,t){var o='x'===t?'Left':'Top',n='Left'==o?'Right':'Bottom';return parseFloat(e['border'+o+'Width'],10)+parseFloat(e['border'+n+'Width'],10)}function h(e,t,o,n){return ee(t['offset'+e],t['scroll'+e],o['client'+e],o['offset'+e],o['scroll'+e],r(10)?parseInt(o['offset'+e])+parseInt(n['margin'+('Height'===e?'Top':'Left')])+parseInt(n['margin'+('Height'===e?'Bottom':'Right')]):0)}function c(e){var t=e.body,o=e.documentElement,n=r(10)&&getComputedStyle(o);return{height:h('Height',t,o,n),width:h('Width',t,o,n)}}function g(e){return fe({},e,{right:e.left+e.width,bottom:e.top+e.height})}function u(e){var o={};try{if(r(10)){o=e.getBoundingClientRect();var n=l(e,'top'),i=l(e,'left');o.top+=n,o.left+=i,o.bottom+=n,o.right+=i}else o=e.getBoundingClientRect()}catch(t){}var p={left:o.left,top:o.top,width:o.right-o.left,height:o.bottom-o.top},s='HTML'===e.nodeName?c(e.ownerDocument):{},d=s.width||e.clientWidth||p.right-p.left,a=s.height||e.clientHeight||p.bottom-p.top,f=e.offsetWidth-d,h=e.offsetHeight-a;if(f||h){var u=t(e);f-=m(u,'x'),h-=m(u,'y'),p.width-=f,p.height-=h}return g(p)}function b(e,o){var i=2<arguments.length&&void 0!==arguments[2]&&arguments[2],p=r(10),s='HTML'===o.nodeName,d=u(e),a=u(o),l=n(e),m=t(o),h=parseFloat(m.borderTopWidth,10),c=parseFloat(m.borderLeftWidth,10);i&&s&&(a.top=ee(a.top,0),a.left=ee(a.left,0));var b=g({top:d.top-a.top-h,left:d.left-a.left-c,width:d.width,height:d.height});if(b.marginTop=0,b.marginLeft=0,!p&&s){var w=parseFloat(m.marginTop,10),y=parseFloat(m.marginLeft,10);b.top-=h-w,b.bottom-=h-w,b.left-=c-y,b.right-=c-y,b.marginTop=w,b.marginLeft=y}return(p&&!i?o.contains(l):o===l&&'BODY'!==l.nodeName)&&(b=f(b,o)),b}function w(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],o=e.ownerDocument.documentElement,n=b(e,o),i=ee(o.clientWidth,window.innerWidth||0),r=ee(o.clientHeight,window.innerHeight||0),p=t?0:l(o),s=t?0:l(o,'left'),d={top:p-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:i,height:r};return g(d)}function y(e){var n=e.nodeName;if('BODY'===n||'HTML'===n)return!1;if('fixed'===t(e,'position'))return!0;var i=o(e);return!!i&&y(i)}function E(e){if(!e||!e.parentElement||r())return document.documentElement;for(var o=e.parentElement;o&&'none'===t(o,'transform');)o=o.parentElement;return o||document.documentElement}function v(e,t,i,r){var p=4<arguments.length&&void 0!==arguments[4]&&arguments[4],s={top:0,left:0},d=p?E(e):a(e,t);if('viewport'===r)s=w(d,p);else{var l;'scrollParent'===r?(l=n(o(t)),'BODY'===l.nodeName&&(l=e.ownerDocument.documentElement)):'window'===r?l=e.ownerDocument.documentElement:l=r;var f=b(l,d,p);if('HTML'===l.nodeName&&!y(d)){var m=c(e.ownerDocument),h=m.height,g=m.width;s.top+=f.top-f.marginTop,s.bottom=h+f.top,s.left+=f.left-f.marginLeft,s.right=g+f.left}else s=f}i=i||0;var u='number'==typeof i;return s.left+=u?i:i.left||0,s.top+=u?i:i.top||0,s.right-=u?i:i.right||0,s.bottom-=u?i:i.bottom||0,s}function x(e){var t=e.width,o=e.height;return t*o}function O(e,t,o,n,i){var r=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf('auto'))return e;var p=v(o,n,r,i),s={top:{width:p.width,height:t.top-p.top},right:{width:p.right-t.right,height:p.height},bottom:{width:p.width,height:p.bottom-t.bottom},left:{width:t.left-p.left,height:p.height}},d=Object.keys(s).map(function(e){return fe({key:e},s[e],{area:x(s[e])})}).sort(function(e,t){return t.area-e.area}),a=d.filter(function(e){var t=e.width,n=e.height;return t>=o.clientWidth&&n>=o.clientHeight}),l=0<a.length?a[0].key:d[0].key,f=e.split('-')[1];return l+(f?'-'+f:'')}function L(e,t,o){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,i=n?E(t):a(t,o);return b(o,i,n)}function S(e){var t=e.ownerDocument.defaultView,o=t.getComputedStyle(e),n=parseFloat(o.marginTop||0)+parseFloat(o.marginBottom||0),i=parseFloat(o.marginLeft||0)+parseFloat(o.marginRight||0),r={width:e.offsetWidth+i,height:e.offsetHeight+n};return r}function T(e){var t={left:'right',right:'left',bottom:'top',top:'bottom'};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function C(e,t,o){o=o.split('-')[0];var n=S(e),i={width:n.width,height:n.height},r=-1!==['right','left'].indexOf(o),p=r?'top':'left',s=r?'left':'top',d=r?'height':'width',a=r?'width':'height';return i[p]=t[p]+t[d]/2-n[d]/2,i[s]=o===s?t[s]-n[a]:t[T(s)],i}function D(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function N(e,t,o){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===o});var n=D(e,function(e){return e[t]===o});return e.indexOf(n)}function P(t,o,n){var i=void 0===n?t:t.slice(0,N(t,'name',n));return i.forEach(function(t){t['function']&&console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var n=t['function']||t.fn;t.enabled&&e(n)&&(o.offsets.popper=g(o.offsets.popper),o.offsets.reference=g(o.offsets.reference),o=n(o,t))}),o}function k(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=L(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=C(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?'fixed':'absolute',e=P(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function W(e,t){return e.some(function(e){var o=e.name,n=e.enabled;return n&&o===t})}function B(e){for(var t=[!1,'ms','Webkit','Moz','O'],o=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length;n++){var i=t[n],r=i?''+i+o:e;if('undefined'!=typeof document.body.style[r])return r}return null}function H(){return this.state.isDestroyed=!0,W(this.modifiers,'applyStyle')&&(this.popper.removeAttribute('x-placement'),this.popper.style.position='',this.popper.style.top='',this.popper.style.left='',this.popper.style.right='',this.popper.style.bottom='',this.popper.style.willChange='',this.popper.style[B('transform')]=''),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function A(e){var t=e.ownerDocument;return t?t.defaultView:window}function M(e,t,o,i){var r='BODY'===e.nodeName,p=r?e.ownerDocument.defaultView:e;p.addEventListener(t,o,{passive:!0}),r||M(n(p.parentNode),t,o,i),i.push(p)}function F(e,t,o,i){o.updateBound=i,A(e).addEventListener('resize',o.updateBound,{passive:!0});var r=n(e);return M(r,'scroll',o.updateBound,o.scrollParents),o.scrollElement=r,o.eventsEnabled=!0,o}function I(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}function R(e,t){return A(e).removeEventListener('resize',t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener('scroll',t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function U(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=R(this.reference,this.state))}function Y(e){return''!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function V(e,t){Object.keys(t).forEach(function(o){var n='';-1!==['width','height','top','right','bottom','left'].indexOf(o)&&Y(t[o])&&(n='px'),e.style[o]=t[o]+n})}function j(e,t){Object.keys(t).forEach(function(o){var n=t[o];!1===n?e.removeAttribute(o):e.setAttribute(o,t[o])})}function q(e,t){var o=e.offsets,n=o.popper,i=o.reference,r=$,p=function(e){return e},s=r(i.width),d=r(n.width),a=-1!==['left','right'].indexOf(e.placement),l=-1!==e.placement.indexOf('-'),f=t?a||l||s%2==d%2?r:Z:p,m=t?r:p;return{left:f(1==s%2&&1==d%2&&!l&&t?n.left-1:n.left),top:m(n.top),bottom:m(n.bottom),right:f(n.right)}}function K(e,t,o){var n=D(e,function(e){var o=e.name;return o===t}),i=!!n&&e.some(function(e){return e.name===o&&e.enabled&&e.order<n.order});if(!i){var r='`'+t+'`';console.warn('`'+o+'`'+' modifier is required by '+r+' modifier in order to work, be sure to include it before '+r+'!')}return i}function z(e){return'end'===e?'start':'start'===e?'end':e}function G(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],o=ce.indexOf(e),n=ce.slice(o+1).concat(ce.slice(0,o));return t?n.reverse():n}function _(e,t,o,n){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+i[1],p=i[2];if(!r)return e;if(0===p.indexOf('%')){var s;switch(p){case'%p':s=o;break;case'%':case'%r':default:s=n;}var d=g(s);return d[t]/100*r}if('vh'===p||'vw'===p){var a;return a='vh'===p?ee(document.documentElement.clientHeight,window.innerHeight||0):ee(document.documentElement.clientWidth,window.innerWidth||0),a/100*r}return r}function X(e,t,o,n){var i=[0,0],r=-1!==['right','left'].indexOf(n),p=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=p.indexOf(D(p,function(e){return-1!==e.search(/,|\s/)}));p[s]&&-1===p[s].indexOf(',')&&console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var d=/\s*,\s*|\s+/,a=-1===s?[p]:[p.slice(0,s).concat([p[s].split(d)[0]]),[p[s].split(d)[1]].concat(p.slice(s+1))];return a=a.map(function(e,n){var i=(1===n?!r:r)?'height':'width',p=!1;return e.reduce(function(e,t){return''===e[e.length-1]&&-1!==['+','-'].indexOf(t)?(e[e.length-1]=t,p=!0,e):p?(e[e.length-1]+=t,p=!1,e):e.concat(t)},[]).map(function(e){return _(e,i,t,o)})}),a.forEach(function(e,t){e.forEach(function(o,n){Y(o)&&(i[t]+=o*('-'===e[n-1]?-1:1))})}),i}function J(e,t){var o,n=t.offset,i=e.placement,r=e.offsets,p=r.popper,s=r.reference,d=i.split('-')[0];return o=Y(+n)?[+n,0]:X(n,p,s,d),'left'===d?(p.top+=o[0],p.left-=o[1]):'right'===d?(p.top+=o[0],p.left+=o[1]):'top'===d?(p.left+=o[0],p.top-=o[1]):'bottom'===d&&(p.left+=o[0],p.top+=o[1]),e.popper=p,e}for(var Q=Math.min,Z=Math.floor,$=Math.round,ee=Math.max,te='undefined'!=typeof window&&'undefined'!=typeof document,oe=['Edge','Trident','Firefox'],ne=0,ie=0;ie<oe.length;ie+=1)if(te&&0<=navigator.userAgent.indexOf(oe[ie])){ne=1;break}var i=te&&window.Promise,re=i?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},ne))}},pe=te&&!!(window.MSInputMethodContext&&document.documentMode),se=te&&/MSIE 10/.test(navigator.userAgent),de=function(e,t){if(!(e instanceof t))throw new TypeError('Cannot call a class as a function')},ae=function(){function e(e,t){for(var o,n=0;n<t.length;n++)o=t[n],o.enumerable=o.enumerable||!1,o.configurable=!0,'value'in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),le=function(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e},fe=Object.assign||function(e){for(var t,o=1;o<arguments.length;o++)for(var n in t=arguments[o],t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},me=te&&/Firefox/i.test(navigator.userAgent),he=['auto-start','auto','auto-end','top-start','top','top-end','right-start','right','right-end','bottom-end','bottom','bottom-start','left-end','left','left-start'],ce=he.slice(3),ge={FLIP:'flip',CLOCKWISE:'clockwise',COUNTERCLOCKWISE:'counterclockwise'},ue=function(){function t(o,n){var i=this,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};de(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=re(this.update.bind(this)),this.options=fe({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=o&&o.jquery?o[0]:o,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(fe({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=fe({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return fe({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(t){t.enabled&&e(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var p=this.options.eventsEnabled;p&&this.enableEventListeners(),this.state.eventsEnabled=p}return ae(t,[{key:'update',value:function(){return k.call(this)}},{key:'destroy',value:function(){return H.call(this)}},{key:'enableEventListeners',value:function(){return I.call(this)}},{key:'disableEventListeners',value:function(){return U.call(this)}}]),t}();return ue.Utils=('undefined'==typeof window?global:window).PopperUtils,ue.placements=he,ue.Defaults={placement:'bottom',positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,o=t.split('-')[0],n=t.split('-')[1];if(n){var i=e.offsets,r=i.reference,p=i.popper,s=-1!==['bottom','top'].indexOf(o),d=s?'left':'top',a=s?'width':'height',l={start:le({},d,r[d]),end:le({},d,r[d]+r[a]-p[a])};e.offsets.popper=fe({},p,l[n])}return e}},offset:{order:200,enabled:!0,fn:J,offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var o=t.boundariesElement||p(e.instance.popper);e.instance.reference===o&&(o=p(o));var n=B('transform'),i=e.instance.popper.style,r=i.top,s=i.left,d=i[n];i.top='',i.left='',i[n]='';var a=v(e.instance.popper,e.instance.reference,t.padding,o,e.positionFixed);i.top=r,i.left=s,i[n]=d,t.boundaries=a;var l=t.priority,f=e.offsets.popper,m={primary:function(e){var o=f[e];return f[e]<a[e]&&!t.escapeWithReference&&(o=ee(f[e],a[e])),le({},e,o)},secondary:function(e){var o='right'===e?'left':'top',n=f[o];return f[e]>a[e]&&!t.escapeWithReference&&(n=Q(f[o],a[e]-('right'===e?f.width:f.height))),le({},o,n)}};return l.forEach(function(e){var t=-1===['left','top'].indexOf(e)?'secondary':'primary';f=fe({},f,m[t](e))}),e.offsets.popper=f,e},priority:['left','right','top','bottom'],padding:5,boundariesElement:'scrollParent'},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,o=t.popper,n=t.reference,i=e.placement.split('-')[0],r=Z,p=-1!==['top','bottom'].indexOf(i),s=p?'right':'bottom',d=p?'left':'top',a=p?'width':'height';return o[s]<r(n[d])&&(e.offsets.popper[d]=r(n[d])-o[a]),o[d]>r(n[s])&&(e.offsets.popper[d]=r(n[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,o){var n;if(!K(e.instance.modifiers,'arrow','keepTogether'))return e;var i=o.element;if('string'==typeof i){if(i=e.instance.popper.querySelector(i),!i)return e;}else if(!e.instance.popper.contains(i))return console.warn('WARNING: `arrow.element` must be child of its popper element!'),e;var r=e.placement.split('-')[0],p=e.offsets,s=p.popper,d=p.reference,a=-1!==['left','right'].indexOf(r),l=a?'height':'width',f=a?'Top':'Left',m=f.toLowerCase(),h=a?'left':'top',c=a?'bottom':'right',u=S(i)[l];d[c]-u<s[m]&&(e.offsets.popper[m]-=s[m]-(d[c]-u)),d[m]+u>s[c]&&(e.offsets.popper[m]+=d[m]+u-s[c]),e.offsets.popper=g(e.offsets.popper);var b=d[m]+d[l]/2-u/2,w=t(e.instance.popper),y=parseFloat(w['margin'+f],10),E=parseFloat(w['border'+f+'Width'],10),v=b-e.offsets.popper[m]-y-E;return v=ee(Q(s[l]-u,v),0),e.arrowElement=i,e.offsets.arrow=(n={},le(n,m,$(v)),le(n,h,''),n),e},element:'[x-arrow]'},flip:{order:600,enabled:!0,fn:function(e,t){if(W(e.instance.modifiers,'inner'))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var o=v(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),n=e.placement.split('-')[0],i=T(n),r=e.placement.split('-')[1]||'',p=[];switch(t.behavior){case ge.FLIP:p=[n,i];break;case ge.CLOCKWISE:p=G(n);break;case ge.COUNTERCLOCKWISE:p=G(n,!0);break;default:p=t.behavior;}return p.forEach(function(s,d){if(n!==s||p.length===d+1)return e;n=e.placement.split('-')[0],i=T(n);var a=e.offsets.popper,l=e.offsets.reference,f=Z,m='left'===n&&f(a.right)>f(l.left)||'right'===n&&f(a.left)<f(l.right)||'top'===n&&f(a.bottom)>f(l.top)||'bottom'===n&&f(a.top)<f(l.bottom),h=f(a.left)<f(o.left),c=f(a.right)>f(o.right),g=f(a.top)<f(o.top),u=f(a.bottom)>f(o.bottom),b='left'===n&&h||'right'===n&&c||'top'===n&&g||'bottom'===n&&u,w=-1!==['top','bottom'].indexOf(n),y=!!t.flipVariations&&(w&&'start'===r&&h||w&&'end'===r&&c||!w&&'start'===r&&g||!w&&'end'===r&&u),E=!!t.flipVariationsByContent&&(w&&'start'===r&&c||w&&'end'===r&&h||!w&&'start'===r&&u||!w&&'end'===r&&g),v=y||E;(m||b||v)&&(e.flipped=!0,(m||b)&&(n=p[d+1]),v&&(r=z(r)),e.placement=n+(r?'-'+r:''),e.offsets.popper=fe({},e.offsets.popper,C(e.instance.popper,e.offsets.reference,e.placement)),e=P(e.instance.modifiers,e,'flip'))}),e},behavior:'flip',padding:5,boundariesElement:'viewport',flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,o=t.split('-')[0],n=e.offsets,i=n.popper,r=n.reference,p=-1!==['left','right'].indexOf(o),s=-1===['top','left'].indexOf(o);return i[p?'left':'top']=r[o]-(s?i[p?'width':'height']:0),e.placement=T(t),e.offsets.popper=g(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!K(e.instance.modifiers,'hide','preventOverflow'))return e;var t=e.offsets.reference,o=D(e.instance.modifiers,function(e){return'preventOverflow'===e.name}).boundaries;if(t.bottom<o.top||t.left>o.right||t.top>o.bottom||t.right<o.left){if(!0===e.hide)return e;e.hide=!0,e.attributes['x-out-of-boundaries']=''}else{if(!1===e.hide)return e;e.hide=!1,e.attributes['x-out-of-boundaries']=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var o=t.x,n=t.y,i=e.offsets.popper,r=D(e.instance.modifiers,function(e){return'applyStyle'===e.name}).gpuAcceleration;void 0!==r&&console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var s,d,a=void 0===r?t.gpuAcceleration:r,l=p(e.instance.popper),f=u(l),m={position:i.position},h=q(e,2>window.devicePixelRatio||!me),c='bottom'===o?'top':'bottom',g='right'===n?'left':'right',b=B('transform');if(d='bottom'==c?'HTML'===l.nodeName?-l.clientHeight+h.bottom:-f.height+h.bottom:h.top,s='right'==g?'HTML'===l.nodeName?-l.clientWidth+h.right:-f.width+h.right:h.left,a&&b)m[b]='translate3d('+s+'px, '+d+'px, 0)',m[c]=0,m[g]=0,m.willChange='transform';else{var w='bottom'==c?-1:1,y='right'==g?-1:1;m[c]=d*w,m[g]=s*y,m.willChange=c+', '+g}var E={"x-placement":e.placement};return e.attributes=fe({},E,e.attributes),e.styles=fe({},m,e.styles),e.arrowStyles=fe({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:'bottom',y:'right'},applyStyle:{order:900,enabled:!0,fn:function(e){return V(e.instance.popper,e.styles),j(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&V(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,o,n,i){var r=L(i,t,e,o.positionFixed),p=O(o.placement,r,t,e,o.modifiers.flip.boundariesElement,o.modifiers.flip.padding);return t.setAttribute('x-placement',p),V(t,{position:o.positionFixed?'fixed':'absolute'}),o},gpuAcceleration:void 0}}},ue});
//# sourceMappingURL=popper.min.js.map;
(function($) { "use strict";

    /**
     * jQuery plugin: makes element stick to top or bottom of the page when not in view.
     * When would be normally in view, stays as usual in its place.
     */

    $.fn.sticky = function(options) {
        var $self = this;
        var o = $.extend({
            fixed_css: { bottom: 0 },
            fixed_class: 'sticky-fixed',
            isStaticVisible: defaultIsStaticVisible,
            getClone: defaultGetClone,
            showFixed: function(e) {
                e.element.css({
                    'min-height': e.element.height()
                });
                e.fixed_clone.empty().css({
                    'min-width': e.element.width()
                }).append(e.element.children());
            },
            hideFixed: function(e) {
                e.element.css({
                    'min-height': 0
                });
                e.fixed_clone.children().appendTo(e.element);
            },
            updateFixed: function(e) {
                e.fixed_clone.css({
                    'min-width': e.element.width()
                });
            }
        }, options || {});

        // Prepare data for each element we're about to initialize
        var elements = $self.map(function() {
            var $e = $(this);
            return {
                element: $e,
                fixed_clone: o.getClone.call($e, $e, o),
                is_fixed: false
            };
        }).get();

        $(window).on('resize scroll', ensurePosition);
        ensurePosition();
        return this;

        function ensurePosition() {
            if (!$self.closest('body').length) {
                $(window).off('resize scroll', ensurePosition);
                return;
            }

            $.each(elements, function(i, e) {
                if (o.isStaticVisible.call(e.element, e, o)) {
                    if (e.is_fixed) {
                        e.is_fixed = false;
                        e.fixed_clone.hide();
                        o.hideFixed && o.hideFixed.call(e.fixed_clone, e, o); // !!! use events instead?
                    }
                } else {
                    if (!e.is_fixed) {
                        e.is_fixed = true;
                        e.fixed_clone.show();
                        o.showFixed && o.showFixed.call(e.fixed_clone, e, o); // !!! use events instead?
                    }
                    o.updateFixed && o.updateFixed.call(e.fixed_clone, e, o); // !!! use events instead?
                }
            });
        }
    };

    function defaultIsStaticVisible(e, o) {

        var $window = $(window);
        var window_borders = {
            top: $window.scrollTop(),
            right: $window.scrollLeft() + $window.width(),
            bottom: $window.scrollTop() + $window.height(),
            left: $window.scrollLeft()
        };

        var element_borders = e.element.offset();
        element_borders.right = element_borders.left + e.element.outerWidth();
        element_borders.bottom = element_borders.top + e.element.outerHeight();

        return  window_borders.top <= element_borders.top &&
                window_borders.left <= element_borders.left &&
                window_borders.right >= element_borders.right &&
                window_borders.bottom >= element_borders.bottom;
    }

    function defaultGetClone($e, o) {
        return $e.clone().empty().addClass(o.fixed_class || 'sticky-fixed').css($.extend(
            { position: 'fixed', display: 'none' },
            o.fixed_css || {}
        )).removeAttr('id').insertAfter($e);
    }

})(jQuery);;
(function($) {

    $.fn.lazyLoad = function(options, ext) {

        if (options == 'stop') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.stopped = true;
            }
            return;
        }

        if (options == 'sleep') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = true;
            }
            return;
        }

        if (options == 'wake') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = false;
            }
            return;
        }

        if (options == 'force') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                if (!settings.loading) {
                    settings.load();
                }
            }
            return;
        }

        this.data('lazyLoadSettings', $.extend({
            distance: 50,
            load: function() {},
            container: container,
            state: 'wake',
            hash: location.hash.replace(/^[^#]*#\/*/, '').split('/')[0] || null,
            distanceBetweenBottoms: null
        }, options || {}));

        var settings = this.data('lazyLoadSettings');
        settings.loading = false;
        settings.stopped = false;

        var win = this;
        var container = typeof settings.container === 'string' ? $(settings.container) : settings.container;

        init();

        function init()
        {
            if (settings.hash !== null) {
                if (!$.isArray(settings.hash)) {
                    settings.hash = [settings.hash];
                }
            }
            $.fn.lazyLoad.call(win, settings.state);
            initHandler();
        }

        function scrollHandler()
        {
            if (settings.stopped) {
                this.onscroll = null;
                return;
            }
            if (!settings.stopped && !settings.loading && distanceBetweenBottoms(container, win) <= settings.distance) {
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        this.onscroll = null;
                        return;
                    }
                }
                settings.load();
            }
        }

        function initHandler()
        {
            var interval = 350;
            var timerId = setTimeout(function() {
                if (settings.stopped) {
                    clearTimeout(timerId);
                    return;
                }
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        clearTimeout(timerId);
                        return;
                    }
                }
                if (!settings.loading) {
                    var r = distanceBetweenBottoms(container, win);
                    if (distanceBetweenBottoms(container, win) <= settings.distance) {
                        settings.load();
                        timerId = setTimeout(arguments.callee, interval);
                    } else {
                        win.get(0).onscroll = scrollHandler;
                        clearTimeout(timerId);
                    }
                } else {
                    timerId = setTimeout(arguments.callee, interval);
                }
            }, interval);
        }

        var distanceBetweenBottoms = typeof settings.distanceBetweenBottoms === 'function' ?
            settings.distanceBetweenBottoms :
            function (container, win, offset) {
                offset = offset || 0;
                return (container.position().top + container.outerHeight() - offset) - (win.scrollTop() + win.height());
            };
    };
})(jQuery);
;
(function ($) {

    $('#topic-access-toggle').iButton({
        labelOn: '',
        labelOff: '',
        className: 'mini'
    });

    $.storage = new $.store();
    // js controller
    $.hub = {
        lang: false,
        framework_version: false,
        options: {
            accountName: ''
        },
        // init js controller
        init: function (options) {

            this.options = options || {};
            $.sidebar.init();

            // Init dispatcher based on location.hash
            if (typeof($.History) != "undefined") {
                $.History.bind($.hub.dispatch);

                $.History.unbind = function (state, handler) {
                    if (handler) {
                        if ($.History.handlers.specific[state]) {
                            $.each($.History.handlers.specific[state], function (i, h) {
                                if (h === handler) {
                                    $.History.handlers.specific[state].splice(i, 1);
                                    return false;
                                }
                            });
                        }
                    } else {
                        // We have a generic handler
                        handler = state;
                        $.each($.History.handlers.generic, function (i, h) {
                            if (h === handler) {
                                $.History.handlers.generic.splice(i, 1);
                                return false;
                            }
                        });
                    }
                };
            }
            var hash = window.location.hash;
            if (hash === '#/' || !hash) {
                this.dispatch();
            }
        },

        // Change location hash without triggering dispatch
        forceHash: function (hash) {
            hash = $.hub.helper.cleanHash(hash);
            if ($.hub.currentHash !== hash) {
                $.hub.currentHash = hash;
                $.wa.setHash(hash);
            }
        },

        // history.back() without triggering dispatch. Run callback when hash changes.
        // Used to go back after deletion so that we won't end up in non-existing page.
        backWithoutDispatch: function (callback) {
            var h;
            if (callback) {
                $.History.bind(h = function () {
                    $.History.unbind(h);
                    callback();
                });
            }

            this.skipDispatch = 1;
            history.back();
        },

        // Dispatch again based on current hash
        redispatch: function () {
            this.currentHash = null;
            this.dispatch();
        },

        // if this is > 0 then this.dispatch() decrements it and ignores a call
        skipDispatch: 0,

        // last hash processed by this.dispatch()
        currentHash: null,

        // dispatch call method by hash
        dispatch: function (hash) {
            if (this !== $.hub) {
                return $.hub.dispatch(hash);
            }

            if ($.hub.skipDispatch > 0) {
                $.hub.skipDispatch--;
                return false;
            }

            hash = $.hub.helper.cleanHash(hash || undefined);
            if ($.hub.currentHash == hash) {
                return;
            }

            var old_hash = $.hub.currentHash;
            $.hub.currentHash = hash;

            // Fire an event allowing to prevent navigation away from current hash
            var e = new $.Event('wa_before_dispatched');
            $(window).trigger(e);
            if (e.isDefaultPrevented()) {
                $.hub.currentHash = old_hash;
                $.wa.setHash(old_hash);
                return false;
            }

            if (hash) {
                // clear hash
                hash = hash.replace(/^.*#\/?/, '').replace(/\/$/, '');
                hash = hash.split('/');

                if (hash[0]) {
                    var actionName = "";
                    var attrMarker = hash.length;
                    for (var i = 0; i < hash.length; i++) {
                        var h = hash[i];
                        if (i < 2) {
                            if (i === 0) {
                                actionName = h;
                            } else if ((h == 'add') || ((parseInt(h, 10) != h) && (h.indexOf('=') == -1) && (actionName != 'search') && (actionName != 'following') && (actionName != 'plugins'))) {
                                actionName += h.substr(0, 1).toUpperCase() + h.substr(1);
                            } else {
                                attrMarker = i;
                                break;
                            }
                        } else {
                            attrMarker = i;
                            break;
                        }
                    }
                    var attr = hash.slice(attrMarker);
                    // call action if it exists
                    if ($.hub[actionName + 'Action']) {
                        $.sidebar.highlight();
                        $.hub.currentAction = actionName;
                        $.hub.currentActionAttr = attr;
                        $.hub[actionName + 'Action'].apply($.hub, attr);
                        $('body').animate({scrollTop: 0}, 200);
                    } else {
                        if (console) {
                            console.log('Invalid action name:', actionName + 'Action');
                        }
                    }
                } else {
                    // call default action
                    $.hub.defaultAction();
                }
            } else {
                // call default action
                $.hub.defaultAction();
            }
        },

        defaultAction: function (order) {
            $('#wa-app > .sidebar li.selected').removeClass('selected');
            $('#wa-app > .sidebar li a[href="#/"]').parent().addClass('selected');
            order = this.getOrder('default', order);
            this.load('?module=topics' + (order ? '&sort=' + order : ''), function () {
            });
        },

        pluginsAction: function (params) {
            if ($('#wa-plugins-container').length) {
                $.plugins.dispatch(params);
            } else {
                this.load('?module=plugins');
            }
        },

        getOrder: function (key, order) {
            key = 'hub/' + key + '/order';
            if (order) {
                $.storage.set(key, order);
                return order;
            } else {
                return $.storage.get(key);
            }
        },

        initLazyLoad: function () {
            var paging = $('.lazyloading-paging');
            if (!paging.length) {
                return;
            }

            var times = parseInt(paging.data('times') || '10', 10);
            var link_text = paging.data('linkText') || 'Load more';

            // check need to initialize lazy-loading
            var current = paging.find('li.selected');
            if (current.children('a').text() != '1') {
                return;
            }
            paging.hide();
            var win = $(window);

            // prevent previous launched lazy-loading
            win.lazyLoad('stop');

            // check need to initialize lazy-loading
            var next = current.next();
            if (next.length) {
                win.lazyLoad({
                    container: '#h-content .h-topics',
                    load: function () {
                        win.lazyLoad('sleep');

                        var paging = $('.lazyloading-paging').hide();
                        var footer = $('.h-footer');

                        // determine actual current and next item for getting actual url
                        var current = paging.find('li.selected');
                        var next = current.next();
                        var url = next.find('a').attr('href');
                        if (!url) {
                            win.lazyLoad('stop');
                            return;
                        }

                        var list = $('#h-content .h-topics');
                        $('.loading-wrapper').show();
                        $.get(url, function (html) {
                            var tmp = $('<div></div>').html(html);
                            list.append(tmp.find('#h-content .h-topics').children());
                            var tmp_paging = tmp.find('.lazyloading-paging').hide();
                            paging.replaceWith(tmp_paging);
                            paging = tmp_paging;

                            footer.replaceWith(tmp.find('.h-footer'));

                            times -= 1;

                            // check need to stop lazy-loading
                            var current = paging.find('li.selected');
                            var next = current.next();
                            if (next.length) {
                                if (!isNaN(times) && times <= 0) {
                                    win.lazyLoad('sleep');
                                    if (!$('.lazyloading-load-more').length) {
                                        $('<a href="#" class="lazyloading-load-more">' + link_text + '</a>').insertAfter(paging)
                                            .click(function () {
                                                times = 1;      // one more time
                                                win.lazyLoad('wake');
                                                win.lazyLoad('force');
                                                return false;
                                            });
                                    }
                                } else {
                                    win.lazyLoad('wake');
                                }
                            } else {
                                win.lazyLoad('stop');
                                $('.lazyloading-load-more').remove();
                            }
                            tmp.remove();

                            list.trigger('lazyload_append');
                            $('.loading-wrapper').hide();
                        });
                    }
                });
            }
        },

        popularAction: function () {
            this.defaultAction('popular');
        },

        archiveAction: function () {
            this.defaultAction('archive');
        },

        updatedAction: function () {
            this.defaultAction('updated');
        },

        recentAction: function () {
            this.defaultAction('recent');
        },

        unansweredAction: function () {
            this.defaultAction('unanswered');
        },

        contactAction: function (contact_id, hub_id, order) {
            order = order || '';
            if (order) {
                order = '&sort=' + order;
            }
            hub_id = hub_id || '';
            if (hub_id) {
                hub_id = '&hub_id=' + hub_id;
            }
            this.load('?module=topics' + order + hub_id + '&hash=contact/' + encodeURIComponent(contact_id), function () {
                $('.h-header .h-sort').remove();
            });
        },

        load: function (url, callback) {
            var options = this.options;
            var load_protector = $.hub.load_protector = Math.random();
            $.get(url, { }, function (result) {
                if (load_protector !== $.hub.load_protector) {
                    // too late!
                    return;
                }
                $(window).scrollTop(0);
                $('#content').html(result);

                var h1 = $('#content').find('h1:first');
                var title;
                if (h1.length) {
                    if (h1.children().length) {
                        if (h1.find('.title').length) {
                            title = h1.find('.title').text();
                        } else {
                            title = h1.contents()[0].textContent ? h1.contents()[0].textContent : h1.contents()[0].innerText;
                        }
                    } else {
                        title = h1.text();
                    }
                    document.title = title + ' — ' + options.accountName;
                }
                if (callback) {
                    try {
                        callback.call(this);
                    } catch (e) {
                    }
                }

                $(window).trigger($.Event('wa_loaded'));
            });
        },

        typeAction: function (id, order) {
            this.load('?module=topics&hash=type/' + id + (order ? '&sort=' + order : ''), function () {

            });
        },

        hubAction: function (id, order) {
            order = this.getOrder('hub' + id, order);
            this.load('?module=topics&hash=hub/' + id + (order ? '&sort=' + order : ''));
        },

        followingAction: function (order) {
            order = this.getOrder('following', order);
            this.load('?module=topics&hash=following' + (order ? '&sort=' + order : ''), function () {

            });
        },

        categoryAddAction: function (hub_id) {
            var self = this;
            hub_id = parseInt(hub_id);
            this.load('?module=settings&action=category&hub_id=' + hub_id, function () {
                self.streamSettingsHandler(null, null, 'category');
            });
        },

        /**
         * Show category stream
         * @param id
         * @param order
         */
        categoryAction: function (id, order, callback) {
            var self = this;
            this.load('?module=topics&hash=category/' + id + (order ? '&sort=' + order : ''), function () {
                if (callback && (typeof callback == 'function')) {
                    callback();
                }
                $('a.stream-edit').click(function () {
                    var $link = $(this);
                    $link.find('.icon16').removeClass('settings').addClass('loading');
                    $('#h-stream-settings').load('?module=settings&action=category&id=' + id, function () {
                        self.streamSettingsHandler(id, $link, 'category');
                    });
                    return false;
                });
            });
        },

        filterAddAction: function () {
            var self = this;
            this.load('?module=settings&action=filter', function () {
                self.streamSettingsHandler(null, null, 'filter');
            });
        },

        filterAction: function (id, order, callback) {
            var self = this;
            order = this.getOrder('filter' + id, order);
            this.load('?module=topics&hash=filter/' + id + (order ? '&sort=' + order : ''), function () {

                if (callback && (typeof callback == 'function')) {
                    callback();
                }

                $('a.stream-edit').click(function () {
                    var $link = $(this);
                    $link.find('.icon16').removeClass('funnel').addClass('loading');
                    $('#h-stream-settings').load('?module=settings&action=filter&id=' + id, function () {
                        self.streamSettingsHandler(id, $link, 'filter');
                    });
                    return false;
                });
            });
        },


        tagAction: function (id, order) {
            this.load('?module=topics&hash=tag/' + id + (order ? '&sort=' + order : ''), function () {
            });
        },

        searchAction: function (q) {
            this.load('?module=topics&hash=search/' + encodeURIComponent(q), function () {
            });
        },

        topicAddAction: function () {
            this.load('?module=topics&action=edit');
        },

        topicEditAction: function (id) {
            this.load('?module=topics&action=edit&id=' + id);
        },

        topicAction: function (id) {
            this.load('?module=topics&action=info&id=' + id);
        },

        settingsAction: function () {
            this.load('?module=settings');
        },

        authorsAction: function () {
            this.load('?module=authors');
        },


        settingsTypeAction: function (id) {
            this.load('?module=settings&action=type&id=' + id);
        },

        settingsHubAction: function (id) {
            this.load('?module=settings&action=hub&id=' + id);
        },

        settingsFilterAction: function (id) {
            this.load('?module=settings&action=filter&id=' + id);
        },

        commentsAction: function (params) {
            this.load('?module=comments'+(params ? '&'+params : ''));
        },

        pagesAction: function (id) {
            if ($('#wa-page-container').length) {
                waLoadPage(id);
            } else {
                this.load('?module=pages');
            }
        },

        designAction: function (params) {
            if (params) {
                if ($('#wa-design-container').length) {
                    waDesignLoad();
                } else {
                    $("#content").load('?module=design', function () {
                        waDesignLoad(params);
                    });
                }
            } else {
                $("#content").load('?module=design', function () {
                    waDesignLoad('');
                });
            }
        },

        designThemesAction: function (params) {
            if ($('#wa-design-container').length) {
                waDesignLoad();
            } else {
                $("#content").load('?module=design', function () {
                    waDesignLoad();
                });
            }
        },

        /**
         *
         * @param r
         * @param {jQuery} $settings
         * @param {jQuery} $form
         * @param {String} id
         * @param {String} type
         * @param {jQuery=} $link
         */
        streamSettingsSaveHandler: function (r, $settings, $form, id, type, $link) {
            $form.find(':submit').prop('disabled', false);
            if (r.status == 'ok') {
                $settings.slideUp();
                if ($link) {
                    $link.find('.icon16').removeClass('loading').addClass(type == 'category' ? 'settings' : 'funnel');
                    $link.show();
                }
                if (r.data) {
                    var data = r.data || {};
                    //update sidebar text & icons
                    switch (type) {
                        case 'category':
                            $.hub.helper.updateCategory(id || data.id, data);
                            break;
                        case 'filter':
                            $.hub.helper.updateFilter(id || data.id, data);
                            break;
                    }

                    if (id) {
                        $('.h-saved').slideDown();
                        var callback = function () {
                            $('.h-saved').show();
                            setTimeout(function () {
                                $('.h-saved').slideUp();
                            }, 4000);
                        };
                        switch (type) {
                            case 'category':
                                if (data.type > 0) {
                                    //reload stream for dynamic category
                                    $.hub.categoryAction(id, null, callback);
                                } else {
                                    $('#list-title-text').text(r.data.name);
                                    document.title = r.data.name + ' — ' + $.hub.options.accountName;
                                }
                                break;
                            case 'filter':
                                //always reload stream
                                $.hub.filterAction(id, null, callback);
                                break;
                        }


                    } else {
                        // load new category stream
                        window.location.hash = '/' + type + '/' + data.id + '/';
                    }
                }
            } else {
                $.hub.helper.formError($form, r.errors || {}, 'category');
            }
        },

        streamDeleteHandler: function (id, type, data) {
            if (data) {
                if (typeof(data) == 'string') {
                    data += '&id=' + id;
                }
            } else {
                data = {
                    id: id
                };
            }
            $.post('?module=settings&action=' + type + 'Delete', data, function (r) {
                if (r.status == 'ok') {
                    switch (type) {
                        case 'category':
                            $.sidebar.sidebar.find('#category-' + id).remove();
                            break;
                        case 'filter':
                            $.sidebar.sidebar.find('a[href="\\#/filter/' + id + '/"]').closest('li').remove();
                            break;
                    }
                    location.hash = '#/';
                }
            }, 'json');
        },


        /**
         * @param {int=} id Category id
         * @param {jQuery=} $link Settings link DOM Element
         * @param {String} type
         * @returns {boolean}
         */
        streamSettingsHandler: function (id, $link, type) {
            if ($link) {
                $link.hide();
            }
            var $settings = $('#h-stream-settings');
            $settings.slideDown();
            var self = this;

            var $form = $settings.find('form');
            this.helper.glyphHandler($form, type, (type == 'filter') ? 'icon' : 'glyph');
            $form.find(':input[name$="\\[name\\]"]:first').focus();
            $form.submit(function () {
                $.hub.helper.formError($form);
                $form.find(':submit').attr('disabled', true);
                // Update tags list
                $('.tagsinput input').trigger(jQuery.Event("keypress", {which: 13}));
                var formData = new FormData(this);
                var $progress = $form.find('#h-category-logo-progressbar');
                var progress = setTimeout(function () {
                    $form.find('.progressbar').show();
                }, 2000);
                $.ajax({
                    url: $form.attr('action'),  //Server script to process data
                    type: 'POST',
                    async: true,
                    xhr: function () {  // Custom XMLHttpRequest
                        var myXhr = $.ajaxSettings.xhr();

                        if (myXhr.upload && $form.find(':input[type="file"]').length) { // Check if upload property exists
                            myXhr.upload.addEventListener('progress', function (e) {
                                if (e.lengthComputable) {
                                    var done = e.loaded || e.position;
                                    var total = e.totalSize || e.total;
                                    $progress.show();
                                    $progress.css('width', Math.min(100, Math.floor(done / total * 100)) + '%');
                                }
                            }, false);
                        }
                        return myXhr;
                    },
                    //Ajax events

                    //beforeSend: beforeSendHandler,
                    success: function (r) {
                        try {
                            clearTimeout(progress);
                            $form.find('.progressbar').hide();
                            var json = $.parseJSON(r);
                            self.streamSettingsSaveHandler(json, $settings, $form, id, type, $link || false)
                        } catch (e) {
                            $.hub.helper.formError($form, {
                                submit: r.replace(/<\/?[^>]+>/gi, '').substr(0, 512)
                            }, 'category');
                        }
                    },
                    //error: errorHandler,
                    data: formData,
                    cache: false,
                    dataType: 'html',
                    contentType: false,
                    processData: false
                });


                return false;
            });


            $('a.cancel', $settings).click(function () {
                $settings.slideUp();
                if ($link) {
                    $link.find('.icon16').removeClass('loading').addClass(type == 'category' ? 'settings' : 'funnel');
                    $link.show();
                } else {
                    window.location.hash = '/';
                }
                //or redirect into hub
                return false;
            });


            if (id) {
                $('a.js-delete', $settings).click(function () {
                    var $link = $(this);
                    if ((type == 'category') && $link.hasClass('js-dialog')) {
                        var $dialog = $('#h-category-delete');
                        $dialog.waDialog({
                            onSubmit: function () {
                                self.streamDeleteHandler(id, type, $dialog.find('form').serialize());
                                return false;
                            }
                        });
                    } else if (confirm($_('Are you sure?'))) {
                        self.streamDeleteHandler(id, type);
                    }
                    return false;
                });
            }

        },


        manageHandler: function (element, event) {
            $('#blog-stream-primary-menu').hide();
            $('#blog-stream-manage-menu').show();
            this.management = true;
            this.onContentUpdate();
            return false;
        },
        manageCompleteHandler: function (element, event) {
            this.management = false;
            $('#blog-stream-manage-menu').hide();
            $('#blog-stream-primary-menu').show();
            $('.b-post.js-managed').each(function () {
                $(this).removeClass('js-managed');
                $(this).find('h3:hidden').show();
                $(this).find('h3:first').hide();
                $(this).find('.b-post-body:hidden, .profile.image20px:hidden').fadeIn();
            });
            return false;
        },

        topics: {
            last_hash: '',
            $topics_ul: null,
            $bulk_menu: null,
            $sort_menu: null,

            init: function (params) {
                this.last_hash = window.location.hash;

                if (params && (typeof params.topics_count != 'undefined')) {
                    var $counter = $('#wa-app > .sidebar li.selected:first .count:first');
                    if ($counter.length) {
                        $counter.text(params.topics_count);
                    }
                }

                this.$topics_ul = $('ul.h-topics');

                this.initBulkActions();
                this.initFollowLinks();
                this.initTopicTypesFilter();

                // Show-hide new comments when user clicks comment counter
                this.$topics_ul.on('click', '.toggle-comments', function () {
                    $(this).closest('li').find('.h-comments').slideToggle();
                });

                // Close 'saved' message when user clicks on a close button
                $('.h-saved .h-close-saved').on('click', function() {
                    $(this).closest('.h-saved').slideUp();
                    return false;
                });
            },

            initBulkActions: function() {
                /** @var {$.hub.topics} self */
                var self = this;
                this.$bulk_menu = $('ul.js-bulk-menu:first');
                this.$sort_menu = $('ul.js-sort-menu:first');

                // Switch to Bulk mode when user clicks on "Select" link
                this.$bulk_menu.find('a:first').click(function () {
                    if ($(this).is(':visible')) {
                        self.$topics_ul.addClass('h-bulk-mode').closest('.h-stream').removeClass('h-mode-normal').addClass('h-mode-bulk');
                    }
                    self.$sort_menu.hide();
                    self.$bulk_menu.children('li').toggle();
                    self.bulkCount();

                    return false;
                });

                // Switch back to normal mode when user clicks on "cancel" link
                this.$bulk_menu.find('a:last').click(function () {
                    if ($(this).is(':visible')) {
                        self.$topics_ul.removeClass('h-bulk-mode').closest('.h-stream').addClass('h-mode-normal').removeClass('h-mode-bulk');;
                    }
                    self.$sort_menu.show();
                    self.$bulk_menu.children('li').toggle();
                    return false;
                });

                // Actions with selected topics: select, delete, move
                this.$bulk_menu.find('a.js-bulk-action').click(function () {
                    var $link = $(this);
                    if (self.bulkCount()) {
                        var confirm_text = $link.data('confirm');
                        if (!confirm_text || confirm(confirm_text)) {
                            var actionName = $link.data('action');
                            actionName = 'bulk' + actionName.substr(0, 1).toUpperCase() + actionName.substr(1);
                            self[actionName + 'Action'].apply(self, [$link]);
                        }
                    } else {
                        alert($_('Select at least one topic'));
                    }
                    return false;
                });

                // Update number of selected topics when checkbox status changes
                this.$topics_ul.on('change', ':input.js-bulk-mode', function () {
                    self.bulkCount();
                    if (this.checked) {
                        $(this).closest('li').addClass('selected').find('h3').addClass('bold');
                    } else {
                        $(this).closest('li').removeClass('selected').find('h3').removeClass('bold');
                    }
                });

                // Shift+click on a checkbox selects all between this one and previous one clicked
                var $last_li_checked = null;
                var $last_li_unchecked = null;
                this.$topics_ul.on('click', ':input.js-bulk-mode', function (e) {

                    var $checkbox = $(this);
                    var $li = $checkbox.closest('.h-topic');
                    if ($checkbox.prop('checked')) {
                        if (e.shiftKey && $last_li_checked) {
                            setCheckedBetween($last_li_checked, $li, true);
                        }
                        $last_li_checked = $li;
                        $last_li_unchecked = null;
                    } else {
                        if (e.shiftKey && $last_li_unchecked) {
                            setCheckedBetween($last_li_unchecked, $li, false);
                        }
                        $last_li_checked = null;
                        $last_li_unchecked = $li;
                    }

                    self.bulkCount();
                });

                // Button to hide a note why topics sorting is not available in dynamic lists
                if ($.storage.get('sort-handler-unavailable-notice-hidden')) {
                    $('.sort-handler-unavailable-notice').remove();
                } else {
                    $('.sort-handler-unavailable-notice .h-close').click(function() {
                        $(this).closest('.sort-handler-unavailable-notice').remove();
                        $.storage.set('sort-handler-unavailable-notice-hidden', true);
                        return false;
                    });
                }

                function setCheckedBetween($from, $to, status) {
                    if (!$from || !$to || !$from[0] || !$to[0] || $from.is($to[0])) {
                        return;
                    }

                    var is_between = false;
                    $to.parent().children().each(function(i, el) {
                        if (!is_between) {
                            if ($from.is(el) || $to.is(el)) {
                                is_between = true;
                            }
                        } else {
                            if ($from.is(el) || $to.is(el)) {
                                return false;
                            }
                            $(el).find('input:checkbox.js-bulk-mode:visible').prop('checked', status).change();
                        }
                    });
                }
            },

            initFollowLinks: function() {

                // Follow/unfollow when user clicks a star
                this.$topics_ul.on('click', '.h-follow', function () {
                    var self = $(this);
                    var i = self.find('i');
                    var follow = i.hasClass('star-empty') ? 1 : 0;

                    $.post('?module=following', {
                        topic_id: self.data('topic'),
                        follow: follow
                    }, function (response) {
                        if (response.status == 'ok') {
                            var n = parseInt($('#following-count').html());
                            var topic_li = self.closest('li');
                            var comments_ul = topic_li.find('.h-comments');
                            if (follow) {
                                comments_ul.slideDown();
                                topic_li.addClass('h-followed').removeClass('h-not-followed');
                                self.addClass('highlighted');
                                i.removeClass('star-empty').addClass('star');
                                self.find('.followers-count').html($_('Following'));
                                n += 1;
                            } else {
                                comments_ul.slideUp();
                                topic_li.removeClass('h-followed').addClass('h-not-followed');
                                self.removeClass('highlighted');
                                i.addClass('star-empty').removeClass('star');
                                self.find('.followers-count').html('');
                                n -= 1;
                            }
                            $('#following-count').addClass('highlighted').html(n);
                        }
                    }, 'json');
                    return false;
                });

            },

            initTopicTypesFilter: function() {

                var $ul = $('#h-content .h-topics');
                var $sort_menu = $('.h-sort.js-sort-menu');
                var $checkboxes = $sort_menu.find('.h-filter-by-type :checkbox');

                // Trigger when user changes checkbox status in filter settings
                $sort_menu.find('.h-filter-by-type').on('change', ':checkbox', function() {
                    updateTopicVisibility();
                    updateMenuHeader();
                });

                // Trigger when lazyloading updates the list
                $ul.on('lazyload_append', function() {
                    updateTopicVisibility();
                });

                // Update visibility of topics in list
                function updateTopicVisibility() {
                    var types_disabled = {};
                    $checkboxes.map(function() {
                        if (this.checked) {
                            return 1;
                        } else {
                            types_disabled[this.value] = 1;
                        }
                    }).length || (types_disabled = {});

                    var lis_to_hide = [];
                    var lis_to_show = [];
                    $ul.children().each(function() {
                        var type_id = $(this).data('type-id');
                        if (types_disabled[type_id]) {
                            lis_to_hide.push(this);
                        } else {
                            lis_to_show.push(this);
                        }
                    });

                    if (lis_to_hide.length) {
                        $(lis_to_hide).css('opacity', 0.7).slideUp(function() {
                            $(lis_to_hide).css('opacity', '');
                            $(window).scroll();
                        });
                        $('.h-footer .place-for-hidden-label').show().children('span').text(lis_to_hide.length);
                        $ul.closest('.h-stream').addClass('h-js-filtered').removeClass('h-not-js-filtered');
                    } else {
                        $('.h-footer .place-for-hidden-label').hide().children('span').text('0');
                        $ul.closest('.h-stream').addClass('h-not-js-filtered').removeClass('h-js-filtered');
                    }
                    lis_to_show.length && $(lis_to_show).slideDown(function() {
                        $(window).scroll(); // triggers lazy loading if needed
                    });
                };

                function updateMenuHeader() {
                    var label = $checkboxes.map(function() {
                        return (this.checked || null) && $.trim($(this).closest('label').text());
                    }).get().join(', ');
                    label = $.trim($sort_menu.find('ul li.selected a').text()) + (label ? (': ' + label) : '');
                    $sort_menu.find('> li > a i').text(label);
                }
            },

            // not called from init(), called directly from Topics.html
            initManualDragAndDrop: function(category_id) {
                this.$topics_ul.sortable({
                    //axis: 'y',
                    items: '> li',
                    distance: 5,
                    //containment: 'parent',
                    tolerance: 'pointer',
                    handle: '.sort,h3 a,i.h-glyph32',
                    update: function (e, ui) {
                        var topic_id = ui.item.data('id');
                        var before_id = ui.item.next('li').data('id');
                        $.post('?module=topics&action=move', { id: topic_id, before_id: before_id, category_id: category_id }, null, 'json').always(function(r, status) {
                            if (status != 'success' || r.status !== 'ok') {
                                console && console.log(status, r.errors || r);
                            }
                        });
                    }
                });
                return;

                // !!!
                this.$topics_ul.children().draggable({
                    connectToSortable: this.$topics_ul,
                    appendTo: "body",
                    helper: 'clone'/*function() {
                        //console.log(this, arguments);
                        return $($.parseHTML('<div style="width:10px;height:10px;background:white;border:2px solid red;border-radius:5px;"></div>'));
                    }*/
                });
                // !!!
                $('#category-1').droppable({
                    tolerance: 'pointer',
                    activeClass: "not-implemented",
                    hoverClass: "highlighted",
                    accept: ":not(.ui-sortable-helper)",
                    drop: function (event, ui) {
                        console.log(ui);
                         $(this).find(".placeholder").remove();
                         //$("<li></li>").text(ui.draggable.text()).appendTo(this);
                     }
                });
            },
            bulkCount: function () {
                var count = this.$topics_ul.find(':input.js-bulk-mode:checked').length;
                this.$bulk_menu.find('.js-count').text(count);
                return count;
            },
            bulkDeleteAction: function ($link) {
                $link.find('i.icon16').removeClass('delete').addClass('loading');
                var ids = [];
                this.$topics_ul.find(':input.js-bulk-mode:checked').each(function () {
                    ids.push(this.value);
                });
                var self = this;
                $.ajax({
                    url: '?module=topics&action=delete',
                    dataType: 'json',
                    type: 'post',
                    data: {
                        ids: ids
                    },
                    /**
                     *
                     * @param {{data:{deleted:Array} }} r
                     */
                    success: function (r) {
                        $link.find('i.icon16').removeClass('loading').addClass('delete');
                        self.$bulk_menu.find('a:last').click();
                        if (r.status != 'ok') {
                            default_error_handler(r);
                            return;
                        }

                        if (r.data.deleted) {
                            for (var i in r.data.deleted) {
                                if (r.data.deleted.hasOwnProperty(i)) {
                                    self.$topics_ul.find('>li[data-id="' + r.data.deleted[i] + '"]').remove();
                                }
                            }
                        }
                    }
                });
            },
            bulkPriorityAction: function ($link) {
                var priority = $link.data('priority');
                var ids = this.$topics_ul.find(':input.js-bulk-mode:checked').map(function () {
                    return this.value;
                }).get();
                $.post('?module=topics&action=bulkPriority', { priority: priority, topic_ids: ids }, function() {
                    $.hub.redispatch();
                });
            },
            bulkMoveAction: function ($link) {
                var params = '&hub_id=' + $link.data('hub') + '&category_id=' + $link.data('category');
                var $dialog = $('#h-bulk-topics-move');
                var self = this;

                if (!$dialog.hasClass('dialog')) {
                    $dialog.load('?module=dialog&action=topicsMove' + params, function () {
                        $dialog.addClass('dialog');
                        $dialog.find(':input[name="hub_id"]').change(function () {
                            if (this.checked) {
                                $dialog.find('select').attr('disabled', true);
                                var $related = $(this).parents('.value:first').find('select:first');
                                if ($related.length) {
                                    $related.attr('disabled', null);
                                }
                            }
                        }).change();
                        self.bulkMoveDialog($dialog);
                    });
                } else {
                    self.bulkMoveDialog($dialog);
                }
            },
            bulkMoveDialog: function ($dialog) {
                var self = this;
                $dialog.waDialog({
                    disableButtonsOnSubmit: true,
                    onLoad: function () {
                        var ids = [];
                        self.$topics_ul.find(':input.js-bulk-mode:checked').each(function () {
                            ids.push(this.value);
                        });
                        $dialog.find(':input[name="topic_ids"]').val(ids.join(','));
                    },
                    onSubmit: function () {
                        var $form = $dialog.find('form:first');
                        var $hub = $form.find(':input[name="hub_id"]:checked');
                        var hub_id = $hub.val();
                        var category_id = $hub.parents('.value:first').find('select:first').val();
                        $.ajax({
                            url: $form.attr('action'),
                            data: $form.serialize(),
                            dataType: 'json',
                            type: 'post',
                            success: function (r) {
                                $dialog.waDialog('close');
                                if (category_id) {
                                    window.location.hash = '/category/' + category_id + '/';
                                } else if (hub_id) {
                                    window.location.hash = '/hub/' + hub_id + '/';
                                } else {
                                    window.location.hash = '/';
                                }
                            }
                        });
                        return false;
                    }
                });
            }
        },

        helper: {

            /**
             * Highlight invalid input form fields
             * @param {jQuery} $form HTMLFormElement or any other HTMLElement, contains inputs and jQuery wrapped
             * @param {Object=}errors key-value list of errors (key - input name, value - error text). If empty all errors will be removed
             * @param {String=} namespace
             */
            formError: function ($form, errors, namespace) {
                $form.find(':submit').attr('disabled', null);
                if (errors) {
                    var selector;
                    for (var field in errors || {}) {
                        if (errors.hasOwnProperty(field)) {
                            var $field = $form.find(this.getSelector(field, namespace));
                            if (!$field.length) {
                                $field = $form.find(this.getSelector(field));
                            }
                            if (!$field.length) {
                                $field = $form.find(':submit:first');
                            }
                            $field.addClass('error');
                            var $message = $field.next('.errormsg');
                            if ($message.length) {
                                $message.text(errors[field]);
                            } else {
                                $message = $field.after($('<em class="errormsg"></em>').text(errors[field]));
                            }
                        }

                    }
                    $form.find('input.error:first').focus();
                } else {
                    $form.find(':input.error').removeClass('error');
                    $form.find('.errormsg').text('');
                }
            },

            /**
             * update sidebar text & icons
             * @param {Number} id Category id
             * @param {{id:number, hub_id: number, name:string, topics_count:number, glyph_html: string}} data
             */
            updateCategory: function (id, data) {
                //update sidebar text & icons
                var $c = $.sidebar.sidebar.find('#category-' + id);
                if ($c.length) {
                    $c.find('.name').text(data.name);
                    $c.find('.count').text(data.topics_count);
                    $c.find('.js-glyph').replaceWith(data.glyph_html);
                    $('h1.list-title .title').text(data.name);
                } else {
                    $.sidebar.reload(function() {
                        $.sidebar.setHub(data.hub_id);
                    });
                }
            },

            /**
             *
             * @param {number} id
             * @param {{id:number, name:string, topics_count: number, icon_html: string}} data
             */
            updateFilter: function (id, data) {
                var $f = $.sidebar.sidebar.find('a[href="\\#/filter/' + id + '/"]').parents('li');
                if ($f.length) {
                    $f.find('.count').text(data.topics_count);
                    $f.find('.name').text(data.name);
                    $f.find('.js-icon').replaceWith(data.icon_html);
                    $('h1.list-title .title').text(data.name);
                } else {
                    var html = '<li>' +
                        '<a href="#/filter/' + (id || data.id) + '/">' + data.icon_html +
                        '<span class="name">name placeholder</span>' +
                            //'<span class="count">' + data.topics_count + '</span>' +
                            //'<strong class="small highlighted">0</strong>' +
                        '</a>' +
                        '</li>';
                    $f = $(html);
                    $f.insertBefore($.sidebar.sidebar.find('a[href="\\#/filter/add/"]').parents('li'));
                    $f.find('.name').text(data.name);
                }
            },

            /**
             *
             * @param {jQuery} $context
             * @param {String} namespace
             * @param {String=} name
             */
            glyphHandler: function ($context, namespace, name) {
                if (!name) {
                    name = 'glyph';
                }
                var $templates = $context.find('.js-' + name + '-templates');
                var $input = $context.find(this.getSelector(name, namespace));
                $templates.on('click', 'li > a', function () {
                    $templates.find('.selected').removeClass('selected');
                    var $this = $(this);
                    $this.parents('li').addClass('selected');
                    $input.val($this.data(name));
                    return false;
                });
            },

            /** Shows a confirmation dialog when user tries to navigate away from current page or current hash. */
            confirmLeave: function (is_relevant, warning_message, confirm_question) {
                var h, h2, $window = $(window);

                $window.on('beforeunload', h = function (e) {
                    if (is_relevant()) {
                        return warning_message;
                    }
                });

                $window.on('wa_before_dispatched', h2 = function (e) {
                    if (!is_relevant()) {
                        $window.off('unload', h).off('wa_before_dispatched', h2);
                        return;
                    }
                    if (!confirm(warning_message + " " + confirm_question)) {
                        e.preventDefault();
                    }
                });
            },

            /** Make sure hash has a # in the begining and exactly one / at the end.
             * For empty hashes (including #, #/, #// etc.) return an empty string.
             * Otherwise, return the cleaned hash.
             * When hash is not specified, current hash is used. */
            cleanHash: function (hash) {
                if (typeof hash == 'undefined') {
                    hash = window.location.hash.toString();
                }

                if (!hash.length) {
                    hash = '' + hash;
                }
                while (hash.length > 0 && hash[hash.length - 1] === '/') {
                    hash = hash.substr(0, hash.length - 1);
                }
                hash += '/';

                if (hash[0] != '#') {
                    if (hash[0] != '/') {
                        hash = '/' + hash;
                    }
                    hash = '#' + hash;
                } else if (hash[1] && hash[1] != '/') {
                    hash = '#/' + hash.substr(1);
                }

                if (hash == '#/') {
                    return '';
                }

                try {
                    // Fixes behaviour of Safari and possibly other browsers
                    hash = decodeURIComponent(hash);
                } catch (e) {
                }

                return hash;
            },

            isCtrlS: function (event) {
                if (event.which == 19) { // Mac users
                    return true;
                }
                if (event.which == 115 && event.ctrlKey) {
                    return true;
                }
                if (String.fromCharCode(event.which).toLowerCase() == 's' && event.ctrlKey) { // for chrome
                    return true;
                }
                return false;
            },

            getSelector: function (field, namespace) {
                var selector = ':input[name="';
                if (namespace) {
                    selector = selector + namespace + '\\[' + field + '\\]"]';
                } else {
                    selector = selector + field + '"]';
                }
                return selector;
            }
        }

    };

})(jQuery);
;
(function ($) {
    $.sidebar = {

        /**
         * @var {jQuery} Jquery object of sidebar
         */
        sidebar: null,

        options: {},

        init: function (options) {
            this.options = options || {};
            this.sidebar = $('#wa-app').find('.sidebar:first');

            this.initCollapsibleSections();
            this.initCategoriesDragAndDrop();
            this.initFiltersDragAndDrop();
            this.highlight();
            $(window).trigger($.Event('wa_sidebar_loaded'));

            // Reload sidebar every once in a while
            if (!this.reloader) {
                this.reloader = setInterval(function() {
                    $.sidebar.reload();
                }, 300000);
            }
        },

        setHub: function(hub_id) {
            var our_hub_category_list = $('#hub-'+hub_id).closest('.h-hub').removeClass('folded').find('.category-list:first');
            $('#wa-app > .sidebar .category-list').not(our_hub_category_list).slideUp(200, function() {
                $(this).closest('.h-hub').addClass('folded');
            });
            our_hub_category_list.slideDown(200);
        },

        initCategoriesDragAndDrop: function() {

            var $ul = this.sidebar.find('.category-list ul');
            $ul.sortable({
                axis: 'y',
                items: '> li',
                distance: 5,
                //containment: 'parent',
                update: function (e, ui) {
                    var params = {
                        id: ui.item.data('categoryId'),
                        before_id: ui.item.prev().data('categoryId') || 0
                    };
                    $.post('?module=categories&action=move', params, null, 'json').always(function(r, status) {
                        if (status != 'success' || r.status !== 'ok') {
                            console && console.log(status, r.errors || r);
                        }
                    });
                }
            });
        },

        initFiltersDragAndDrop: function() {

            var $ul = $('#h-sidebar-filters-list');

            // Initial order
            var lis = {};
            $ul.children().each(function(i, el) {
                var $el = $(el);
                lis[$el.data('filterId')] = $el;
            });
            var initial_order = $.storage.get('hub/filters_order');
            if (initial_order && initial_order.reverse) {
                $.each(initial_order.reverse(), function(i, filter_id) {
                    if (lis[filter_id]) {
                        lis[filter_id].prependTo($ul);
                    }
                });
            }

            $ul.sortable({
                axis: 'y',
                items: '> li',
                distance: 5,
                //containment: 'parent',
                update: function () {
                    var filter_ids = [];
                    $ul.children().each(function(i, el) {
                        filter_ids.push($(el).data('filterId'));
                    });
                    $.storage.set('hub/filters_order', filter_ids);
                }
            });
        },

        initCollapsibleSections: function() {

            var collapseHandler = function (el, not_save) {
                var key = 'hub/' + $(el).attr('id') + '/collapse';
                var i = $(el).find('.collapse-handler');
                var d = $(el).next();
                if (i.hasClass('darr')) {
                    i.removeClass('darr').addClass('rarr');
                    d.hide();
                    if (!not_save) {
                        $.storage.set(key, 1);
                    }
                } else {
                    i.removeClass('rarr').addClass('darr');
                    d.show();
                    if (!not_save) {
                        $.storage.del(key, 1);
                    }
                }
                return false;
            };

            this.sidebar.on('click', '.collapse', function () {
                collapseHandler(this);
            });
            this.sidebar.find('.collapse').each(function () {
                var key = 'hub/' + $(this).attr('id') + '/collapse';
                if ($.storage.get(key)) {
                    collapseHandler(this, true);
                }
            });

        },

        // Highlight current active link in sidebar
        highlight: function(hash) {
            var hash = $.hub.helper.cleanHash(hash),
                hash = hash.replace('\"', '\\"');
            $('#wa-app > .sidebar li.selected').removeClass('selected');
            var tmp_a = $('#wa-app > .sidebar li a[href="'+hash+'"]');
            if (!tmp_a.length && hash.length > 2) {
                tmp_a = $('#wa-app > .sidebar li a[href="' + $.hub.helper.cleanHash(hash.replace(/\/[^\/]+\/$/, '')) + '"]');
            }
            if (tmp_a.length) {
                tmp_a.closest('li').addClass('selected');
            }
        },

        reload: function(callback) {
            var current_hub_id = $('.h-hub:not(.folded)').data('hub-id');
            $.post('?sidebar=1', function(r) {
                $.sidebar.sidebar.html(r);
                $.sidebar.init();
                current_hub_id && $.sidebar.setHub(current_hub_id);
                callback && callback();
            });
        }

    };
})(jQuery);
;
